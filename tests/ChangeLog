2007-10-15  Martin Sebor  <sebor@roguewave.com>

	* 21.string.io.stdcxx-206.cpp: Added a license header.

2007-10-15 Farid Zaripov <farid_zaripov@epam.com>

	* 21.string.io.stdcxx-206.cpp: Perform testing with zero
	and non-zero padding. Perform checking according to
	_RWSTD_NO_EXT_KEEP_WIDTH_ON_FAILUDE macro definition.

2007-10-14  Martin Sebor  <sebor@roguewave.com>

	* 26.valarray.sub.stdcxx-224.cpp: Added regression test for STDCXX-224.

2007-10-10  Martin Sebor  <sebor@roguewave.com>

	* 21.string.io.stdcxx-206.cpp: Regression test for STDCXX-206.

2007-10-10  Martin Sebor  <sebor@roguewave.com>

	* 26.valarray.members.stdcxx-313.cpp: Regression test for STDCXX-313.

2007-10-10  Martin Sebor  <sebor@roguewave.com>

	* 26.valarray.unary.stdcxx-314.cpp: Regression test for STDCXX-314.

2007-10-10  Martin Sebor  <sebor@roguewave.com>

	* 26.valarray.members.stdcxx-318.cpp: Regression test for STCDCXX-318.

2007-10-10 Travis Vitek <vitek@roguewave.com>

	STDCXX-582
	* 0.printf.cpp (test_errno): Deallocate memory allocated
	automatically by rw_snprintfa().

2007-10-04 Farid Zaripov <farid_zaripov@epam.com>

	STDCXX-575
	* 22.locale.cons.mt.cpp [_MSC_VER] (test_ctors): If
	cat == std::locale::messages, compare combined locale
	with first because of the MSVC doesn't support
	LC_MESSAGES constant.

2007-10-04 Farid Zaripov <farid_zaripov@epam.com>

	* 27.stringbuf.xsputn.stdcxx-576.cpp: Regression test for STDCXX-576 issue.

2007-10-03 Farid Zaripov <farid_zaripov@epam.com>

	* 22.locale.moneypunct.cpp (convert): Save the name of the
	original locale using std::string object. Use return instead
	of break to avoid restoring the original locale twice.

2007-10-03 Farid Zaripov <farid_zaripov@epam.com>

	* 23.vector.bool.stdcxx-235.cpp (main): Corrected the
	lines which are testing the operator!=.

2007-09-26 Travis Vitek <vitek@roguewave.com>

	STDCXX-571
	* 22.locale.numpunct.mt.cpp (run_test): Use C++ locale to
	generate test data. This is to avoid any incompatibilities
	between C and C++ locales.
	(thread_func): Updated to use changed test data types.
	(main): add support for command line options nlocales and
	shared-locale for consistency with other multithreaded locale
	tests.

2007-09-26  Farid Zaripov  <farid_zaripov@epam.com>

	* 22.locale.moneypunct.mt.cpp (thread_loop_body): Corrected char type to wchar_t.

2007-09-26  Farid Zaripov  <farid_zaripov@epam.com>

	* 22.locale.money.get.cpp (set_pattern): New function to translate
	test format to money_base::pattern.
	(do_test): If fmat is not null set pattern using set_pattern().
	(test_get): Test patterns replaced to human-readable form.

2007-09-25  Martin Sebor  <sebor@roguewave.com>

	* 26.valarray.transcend.stdcxx-315.cpp: Added regression test
	for STDCXX-315.

2007-09-25  Martin Sebor  <sebor@roguewave.com>

	* 26.valarray.sub.stdcxx-309.cpp: Added regression test for STCXX-309.

2007-09-25  Martin Sebor  <sebor@roguewave.com>

	* 26.valarray.binary.stdcxx-237.cpp: Added regression test for STCXX-237.

2007-09-22  Martin Sebor  <sebor@roguewave.com>

	* 23.list.insert.cpp (InsertRange, InsertRangeOverload): Removed
	an unused local vaiable to silence a gcc warning: unused variable.
	(InsertRangePtrOverload): Removed const qualification from a const
	cast to silence Intel C++ warning warning #191: type qualifier is
	meaningless on cast type.

2007-09-22  Martin Sebor  <sebor@roguewave.com>

	* 23.list.assign.cpp (AssignRangePtrOverload): Removed a pointless
	const qualification from a cast to silence Intel C++ warning #191:
	type qualifier is meaningless on cast type.
	(AssignRangeOverload): Constified a local variable.

2007-09-20  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp (__PURE_CNAME): Undefined Compaq (now HP) C++ macro
	to bring in ENOMEM from <errno.h> otherwise guarded (and undefined)
	by the compiler's strict implementation of the C++ libc headers in
	response to the -std strict_ansi_errors command line option.
	* 0.process: Ditto for ENOENT, ECHILD, and ESRCH.
	* 18.limits.stdcxx-436.cpp: Same for popen().

2007-09-19 Farid Zaripov <Farid_Zaripov@epam.com>

	* 20.temp.buffer.cpp (run_test): Define constant MAX_SIZE = INT_MAX
	for MSVC and ICC/Windows and MAX_SIZE = _RWSTD_PTRDIFF_MAX for other
	platforms.

2007-09-18  Martin Sebor  <sebor@roguewave.com>

	* 21.string.cons.cpp (test_cons): Used argument of the appropriate
	type to silence HP aCC pedantic Warning (suggestion) 887: Type 'int'
	is smaller than type 'unsigned long', unwanted widening in value may
	result.

2007-09-18 Farid Zaripov <Farid_Zaripov@epam.com>

	* rw_streambuf.h: Removed 'Unknown' enum member as unused and
	conflicting with Windows API enumerator.

2007-09-18 Farid Zaripov <Farid_Zaripov@epam.com>

	* 20.temp.buffer.cpp (run_test): Use _RWSTD_LONG_MAX instead
	of _RWSTD_PTRDIFF_MAX because BigStruct parametrized by
	unsigned long type and sizeof (_RWSTD_PTRDIFF_T) can be
	greater that sizeof (unsigned long).

2007-09-18 Farid Zaripov <Farid_Zaripov@epam.com>

	* 22.locale.stdcxx-554.cpp: Removed dependency on rwtest library.

2007-09-17  Travis Vitek  <vitek@roguewave.com>

	* 18.limits.stdcxx-436.cpp: Regression test exercising STDCXX-436.

2007-09-14 Farid Zaripov <Farid_Zaripov@epam.com>

	* 22.locale.messages.cpp: Removed unnecessary #includes.
	* 22.locale.messages.mt.cpp: Ditto.
	Removed generate_catalog() function.
	Used rw_create_catalog() istead of generate_catalog().

2007-09-14 Farid Zaripov <Farid_Zaripov@epam.com>

	* 22.locale.stdcxx-554.cpp: Added a regression test for STDCXX-554.

2007-03-14  Farid Zaripov  <Farid_Zaripov@epam.com>

	* 23.associative.stdcxx-16.cpp: Added Farid's regression test
	for STDCXX-16.

2007-09-12  Travis Vitek  <vitek@roguewave.com>

	* 24.operations.stdcxx-234.cpp: change to get regression
	test to correctly compile on gcc and msvc.

2007-09-06 Farid Zaripov <Farid_Zaripov@epam.com>

	* 22.locale.messages.stdcxx-508_542.cpp: File renamed ...
	* 22.locale.messages.stdcxx-542.cpp: ... to this.

2007-09-06  Martin Sebor  <sebor@roguewave.com>

	* 24.operations.stdcxx-234.cpp: Added a regression test for STDCXX-234.

2007-08-30  Travis Vitek  <vitek@roguewave.com>

	STDCXX-532
	* 22.locale.codecvt.mt.cpp: New test exercising the thread safety
	of the std::codecvt facet.

2008-08-31  Travis Vitek  <vitek@roguewave.com>

	STDCXX-531
	* 22.locale.messages.mt.cpp: New test exercising the thread safety
	of the std::messages facet.

2007-08-28  Travis Vitek  <vitek@roguewave.com>

	STDCXX-413
	* 22.locale.money.get (do_test): move intl param to front of param
	list to avoid modifying many lines of code unnecessarily.
	(test_get): update to support testing international money format,
	add overload to test both local and international money formats.

2007-09-05 Farid Zaripov <Farid_Zaripov@epam.com>

	* 22.locale.messages.stdcxx-508_542.cpp: New regression test
	for STDCXX-508 and STDCXX-542 issues.

2007-09-05 Farid Zaripov <Farid_Zaripov@epam.com>

	* 22.locale.messages.cpp: Removed generate_catalog() function.
	Used rw_create_catalog() istead of generate_catalog().

2007-09-05 Farid Zaripov <Farid_Zaripov@epam.com>

	* rw_locale.h (rw_create_catalog): New function to generate message catalog.
	* locale.cpp (rw_create_catalog): Ditto.

2007-09-4  Travis Vitek  <vitek@roguewave.com>

	STDCXX-511
	* 22.locale.numpunct.mt.cpp (run_test): Fatal assert if unable to
	create at least one locale.
	22.locale.ctype.mt.cpp (run_test): Ditto.

2007-08-28  Travis Vitek  <vitek@roguewave.com>

	STDCXX-528
	* 22.locale.money.get.mt.cpp: New test exercising the thread safety
	of the std::money_get facet. 

2007-09-04 Farid Zaripov <Farid_Zaripov@epam.com>

	* 22.locale.messages.cpp (test_open_close) [_WIN32]: Don't test file
	descriptor leaking because the catalog functions not uses files on Win32.
	(stress_test) [_WIN32]: Removed appending ".dll" because it will be
	appended by Windows by default.

2007-09-04 Farid Zaripov <Farid_Zaripov@epam.com>

	* 22.locale.messages.cpp (test_get): Corrected condition in "for" loop
	to test all messages.

2007-08-29  Martin Sebor  <sebor@roguewave.com>

	* 27.filebuf.virtuals.stdcxx-522.cpp: Add the real regression
	test for STDCXX-522 (not a symlink to it committed in r570898).

2007-08-29  Martin Sebor  <sebor@roguewave.com>

	* 27.filebuf.virtuals.stdcxx-522.cpp: Deleted a symlink.

2007-08-29  Martin Sebor  <sebor@roguewave.com>

	* 27.filebuf.virtuals.stdcxx-522.cpp: Regression test for STDCXX-522.

2007-08-28  Martin Sebor  <sebor@roguewave.com>

	* 20.specialized.stdcxx-390.cpp: Regression test for STDCXX-390.

2007-08-28 Farid Zaripov <Farid_Zaripov@epam.com>

	STDCXX-515
	* 27.stringbuf.xsputn.stdcxx-515.cpp: New regression test for STDCXX-515.

2007-08-28  Travis Vitek  <vitek@roguewave.com>

	* 22.locale.time.get.mt.cpp: New test exercising the thread safety
	of the std::time_get facet. When compiled against the latest trunk
	the test crashes due to what's most likely a library bug that still
	remains to be analyzed.

2007-08-26  Martin Sebor  <sebor@roguewave.com>

	* 23.vector.bool.stdcxx-235.cpp: Regression test for STDCXX-235.

2007-08-25  Martin Sebor  <sebor@roguewave.com>

	* 21.string.stdcxx-162.cpp: Added a regression test for STDCXX-162.

2007-08-25  Travis Vitek  <vitek@roguewave.com>

	STDCXX-530
	* 22.locale.num.get.mt.cpp: New test exercising the thread safety
	of the std::num_get facet.

2007-08-24  Martin Sebor  <sebor@roguewave.com>

	STDCXX-475
	* 18.exception.cpp (induce_exception): Moved local classes
	to namespace scope to work around an Intel C++ 10.0 ICE on
	Linux.

2007-08-22 Farid Zaripov <Farid_Zaripov@epam.com>

	* 21.cwchar.cpp (test_functions) [_MSC_VER]: Prevent invalid parameter
	validation error by setting size to 1.

2007-08-21 Farid Zaripov <Farid_Zaripov@epam.com>

	* 0.char.cpp (test_rw_widen): Added missing parameter in rw_assert().
	(test_rw_narrow): The same.

2007-08-17  Martin Sebor  <sebor@roguewave.com>

	* testdefs.h [Intel C++ 10.0 and prior]: Disabled warning #279:
	controlling expression is constant issued for the commonly used
	statement RW_ASSERT(!"not implemented"). Works around Intel C++
	bug described in STDCXX-487.

2007-08-16  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.statics.mt.cpp: New test exercising the thread safety
	of [lib.locale.statics].

2007-08-15  Martin Sebor  <sebor@roguewave.com>

	* src/locale.cpp (rw_locales): Fixed up bad formatting introduced
	in r565991.
	* 22.locale.money.put.mt.cpp (thread_func): Ditto.
	* 22.locale.num.put.mt.cpp (put_data): Fixed up indentation and
	formatting. Renamed template parameter for consistency. Added
	a missing template argument.
	(thread_func, run_test): Fixed up formatting.

2007-08-14  Travis Vitek  <vitek@roguewave.com>

	* rw_locale.h (rw_locales): Added new parameter to indicate the
	"C" locale should appear at the front of returned locale list.
	* locale.cpp (rw_locales): Added support for new parameter.
	* testdefs.h: Added convenience macro RW_COUNT_OF that can beused
	to get the number of elements in an array.
	* 22.locale.money.put.mt.cpp (MyIos, MyStreambuf, MyMoneyData):
	Added structures to simplify testing.
	(run_test): Build a table of in/outptus for verification in test
	threads.
	(thread_func): Assert the data written matches expected.
	(main): Add support for --nlocales and --shared-locale command
	line arguments
	* 22.locale.num.put.mt.cpp (MyIos, MyStreambuf, MyNumData): Added
	structures to simplify testing.
	(run_test): Build a table of in/outptus for verification in test
	threads.
	(thread_func): Assert the data written matches expected.
	(main): Add support for --nlocales and --shared-locale command
	line arguments
	* 22.locale.time.put.mt.cpp (run_test, thread_func): Use macro
	RW_COUNT_OF. Remove "C" locale fallback. Eliminate unnecessary
	rdbuf() calls.

2007-08-14  Martin Sebor  <sebor@roguewave.com>

	* 18.csetjmp.cpp: New test exercising [support.runtime], header
	<csetjmp>, including STDCXX-513.
	* 18.setjmp.cpp: New test exercising [support.runtime], (deprecated)
	header <setjmp.h>.

2007-08-13 Farid Zaripov <Farid_Zaripov@epam.com>

	* char.cpp (rw_widen): Don't write after end of dst.

2007-08-13 Farid Zaripov <Farid_Zaripov@epam.com>

	* char.cpp (rw_widen): Don't write after end of dst.

2007-08-12  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.time.put.mt.cpp (thread_func): Fixed up formatting and
	used '\0' and L'\0' in place of char() and wchar_t() for simplicity.
	(run_test): Same. Moved code that can't throw outside a try block.
	Printed out the number of locales in addition to their names.

2007-08-10  Travis Vitek    <vitek@roguewave.com>

	* 22.locale.time.put.mt.cpp (MyIos, MyStreambuf, MyTimeData): Added
	structures to simplify testing.
	(run_test): Build table of in/outputs for verification in test threads.
	(thread_func): Assert that data written matches expected.
	(main): Add command line options for specifying number of locales,
	locale names, and locale usage.

2007-08-12 Farid Zaripov <Farid_Zaripov@epam.com>

	* 21.cwchar.cpp: Define long long overloads of get_type_name()
	(fixes compilation problem on MSVC-x64).

2007-08-09 Farid Zaripov <Farid_Zaripov@epam.com>

	* 27.stringbuf.str.stdcxx-514.cpp: New regression test from STDCXX-514 issue.

2007-08-08  Martin Sebor  <sebor@roguewave.com>

	* 18.limits.cvqual.cpp (test_limits): Exercised quiet NAN.

2007-08-07  Martin Sebor  <sebor@roguewave.com>

	* 23.vector.allocator.cpp: New test exercising the ability of vector
	to be instantiated on a user-defined Allocator with a user-defined
	pointer type.

2007-08-06  Martin Sebor  <sebor@roguewave.com>

	STDCXX-510
	* locale.cpp (rw_opt_setlocales): Added option help.

2007-07-31 Farid Zaripov <Farid_Zaripov@epam.com>

	* 22.locale.messages.cpp (test_open_close): Use default locale if loc_name==0.
	(test_get): The same.

2007-07-30 Farid Zaripov <Farid_Zaripov@epam.com>

	* locale.cpp (rw_locales): On error return "C\0" instead of 0.
	[_MSC_VER]: Use _free_dbg() instead of free().

2007-07-29 Farid Zaripov <Farid_Zaripov@epam.com>

	* thread.cpp [_WIN32]: Use _beginthreadex() only if _MT defined.

2007-07-26 Farid Zaripov <Farid_Zaripov@epam.com>

	* thread.cpp (rw_thread_create) [_WIN32]: Use _beginthreadex() instead of CreateThread().

2007-07-25  Martin Sebor  <sebor@roguewave.com>

	* 26.valarray.cassign.cpp: New test exercising [lib.valarray.cassign],
	valarray computed assignment operators.

2007-07-25 Farid Zaripov <Farid_Zaripov@epam.com>

	* 21.string.stdcxx-466.cpp: Corrected tests for find_first_not_of() and find_last_not_of().
	* 21.string.find.first.not.of.cpp: Test updated to reflect changes from r559037.
	* 21.string.find.first.of.cpp: Ditto.
	* 21.string.find.last.not.of.cpp: Ditto.
	* 21.string.find.last.of.cpp: Ditto.

2007-07-25 Farid Zaripov <Farid_Zaripov@epam.com>

	* 22.locale.cons.stdcxx-485.cpp: Moved to tests/regress directory.
	* 21.string.replace.stdcxx-175.cpp: Ditto.
	* 21.string.stdcxx-466.cpp: Ditto.

2007-07-24 Farid Zaripov <Farid_Zaripov@epam.com>

	* 21.string.stdcxx-466.cpp: Corrected file name in file header.
	* 21.string.replace.stdcxx-175.cpp: New regression test for STDCXX-175.

2007-07-24 Farid Zaripov <Farid_Zaripov@epam.com>

	* 21.string.rfind.stdcxx-466.cpp: Added testing of find(), find_first_of(),
	find_last_of(), find_first_not_of(), find_last_not_of(), compare() methods.
	File renamed ...
	* 21.string.stdcxx-466.cpp: ... to this.

2007-07-23  Martin Sebor  <sebor@roguewave.com>

	* process.cpp (__PURE_CNAME): Removed Compaq C++ preprocessor guard.
	* thread.cpp (__PURE_CNAME): Removed an #undef (done in <testdefs.h>
	in r558120).

2007-07-23 Farid Zaripov <Farid_Zaripov@epam.com>

	* 27.istream.manip.cpp (test_ws): ws() shouldn't affect the gcount() value;
	if initial state is not good, the result state should be state | failbit.

2007-07-23 Farid Zaripov <Farid_Zaripov@epam.com>

	* 21.string.rfind.stdcxx-466.cpp: New regression test for STDCXX-466.

2007-07-20  Martin Sebor  <sebor@roguewave.com>

	* testdefs.h (__PURE_CNAME): Undefined the Compaq C++ macro #defined
	in response to the -std strict_ansi_errors compiler option in order
	to allow C++ extensions (such POSIX names) to be declared by C++ libc
	headers when building the test driver.

2007-07-19 Farid Zaripov <Farid_Zaripov@epam.com>

	* 27.istream.unformatted.get.cpp: Update test according to changes in r423404.

2007-07-19 Farid Zaripov <Farid_Zaripov@epam.com>

	* rw_streambuf.h (MyStreambuf): Init throw_when_ array using when parameter.

2007-07-19  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.ctype.mt.cpp: New test exercising the thread safety
	of the member functions narrow() and widen() of the two required
	specializations of the ctype facet.

2007-07-19 Farid Zaripov <Farid_Zaripov@epam.com>

	* 0.new.cpp: Removed handling of the SIGSEGV signal.
	Skip all tests if _RWSTD_NO_REPLACEABLE_NEW_DELETE macro #defined.

2007-07-19  Martin Sebor  <sebor@roguewave.com>

	* rw_locale.h (rw_get_wchars): Declared a new function to find
	a set of (valid or invalid) wide characters in the current locale.
	* locale.cpp (rw_get_wchars): Defined.

2007-07-19  Martin Sebor  <sebor@roguewave.com>

	* rw_locale.h: Added comments, commented out function formal
	arguments.

2007-07-18  Martin Sebor  <sebor@roguewave.com>

	* locale.cpp (<rw_printf.h>, <errno.h>): Removed #include directives.
	(PATH_MAX): Redefined to 1024 when it's too small or excessively big.
	(<driver.h>): #included for rw_note() and rw_warn().
	(rw_locale): Used the BINDIR macro instead of hardcoding its value.
	(rw_localedef): Same. Also replaced fprintf() with rw_error().
	(rw_locale_root): Used PATH_MAX as index instead of hardcoding
	an arbitrary value.
	(rw_set_locale_root): Same. Replaced rw_fprintf() and perror() with
	rw_note() and rw_error(), respectively.
	(rw_get_mb_chars, rw_find_mb_locale): Replaced rw_fprintf() with
	rw_note() or_rw_warn(), whichever was appropriate, and a hardcoded
	arbitrary value with PATH_MAX.
	(rw_create_locale): Replaced a hardcoded arbitrary value with PATH_MAX
	and fprintf() with rw_error().

2007-07-18  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (rw_sprintf): Copied the entire string including
	the terminating NUL to the destination buffer.

2007-07-18  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.globals.mt.cpp (test_has_facet): Exercised has_facet
	specializations on _byname facets only when not disabled on the
	command line.
	Added comments throughout.

2007-07-17  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp (TEST_SPEC): Removed the const quialifier from
	a local variable declaration to silence the pesky Intel C++
	warning #279: controlling expression is constant.

2007-07-17  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.cons.stdcxx-485.cpp: Called rw_locales() to obtain
	the set of installed locales to use. Introduced a dependency on
	rw_test() required in order to be able to call rw_locales().

2007-07-17  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.cons.stdcxx-485.cpp: New regression test for STDCXX-485.

2007-07-13 Farid Zaripov <Farid_Zaripov@epam.com>

	* fmt_bits.cpp (_rw_fmtlasterror): Cast pmsg to const char* to avoid MSVC error.

2007-07-12  Martin Sebor  <sebor@roguewave.com>

	* fmt_defs.h (_rw_fmtlasterror): Declared new function to format
	Windows GetLastError() messages. 
	* fmt_bits.cpp (_rw_fmtlasterror): Defined.
	* printf.cpp (_rw_vasnprintf_ext): Called _rw_fmtlasterror() to process
	the %{E} directive. Set spec.param.int_ to the argument value in the
	the %{m} directive handler to allow it to be referenced in subsequent
	paramno directives.

2007-07-12  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp (test_errno): Exercised %{m} and %{*m} with errno of 0.

2007-07-11 Farid Zaripov <Farid_Zaripov@epam.com>

	* ctype.cpp (do_narrow): Return ch instead of dfault if conversion table not defined.

2007-07-10  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.globals.mt.cpp (opt_facets, opt_no_exceptions): Flags
	flags for the new command line options --enable/disable-<facet>
	and --no-exceptions.
	(test_has_facet, test_use_facet): Disabled/enabbled tests of
	individual facets in response to command line options.
	(run_test): When a facet is explicitly enabled using a command
	line option disabled all the rest that weren't also explicitly
	enabled.
	(main): Added command line options and "handlers."

2007-07-10  Martin Sebor  <sebor@roguewave.com>

	* thread.cpp (rw_get_cpus): Used _SC_NPROCESSORS_ONLN when #defined.

2007-07-10  Martin Sebor  <sebor@roguewave.com>

	* thread.cpp (rw_get_cpus): Used sysconf() to try to determine
	the number of processors programmatically for efficiency before
	invoking a shell script to read system files.

2007-07-09  Martin Sebor  <sebor@roguewave.com>

	* atomic_xchg.cpp (run_test): Documented algorithm used to compute
	the expected value of the shared variable manipulated by threads.

2007-07-08  Martin Sebor  <sebor@roguewave.com>

	* driver.cpp [Linux] (UTS_RELEASE): Removed conditionally-defined
	helper macro in favor of _RWSTD_LINUX_RELEASE.
	(__x86_64__): Moved check above __amd64__ and other x86 arches
	whose macros are always defined (e.g., __pentiumpro__).

2007-07-08  Martin Sebor  <sebor@roguewave.com>

	STDCXX-395
	* etc/config/src/LIMITS.cpp (_RWSTD_WCHAR_T_MAX, _RWSTD_WCHAR_T_MIN,
	_RWSTD_WCHAR_T_SIZE): Renamed to _RWSTD_WCHAR_MAX, _RWSTD_WCHAR_MIN,
	and _RWSTD_WCHAR_SIZE, respectively, for consistency with the libc
	macros.
	* tests/src/locale.cpp: Same.
	* tests/src/char.cpp: Same.
	* tests/src/printf.cpp: Same.
	* tests/localization/22.locale.codecvt.out.cpp: Same.
	* tests/self/0.printf.cpp: Same.
	* include/limits: Same.
	* include/tr1/cstdint: Same.
	* include/ansi/_cwchar.h: Same.
	* src/wctype.cpp: Same.
	* src/wcodecvt.cpp: Same.
	* util/ctype.cpp: Same.
	* util/charmap.cpp: Same.

2007-07-06 Farid Zaripov <Farid_Zaripov@epam.com>

	* 27.stringbuf.virtuals.cpp: #define EOF as unique value;
	(test_virtual): Assign arg0 and ret_expect to Traits::eof() if EOF passed.

2007-07-05 Farid Zaripov <Farid_Zaripov@epam.com>

	* 0.new.cpp: Catch SIGSEGV signal as SIGABRT.

2007-07-05 Farid Zaripov <Farid_Zaripov@epam.com>

	* 27.ostream.cpp (test_formatted): Don't check os.width(0) if
	_RWSTD_NO_EXT_KEEP_WIDTH_ON_FAILURE defined.

2007-07-04  Martin Sebor  <sebor@roguewave.com>

	* 27.ostream.cpp (test_flush): Added a comment documenting
	the test for LWG issue 581.

2007-07-03 Farid Zaripov <Farid_Zaripov@epam.com>

	* 21.string.access.cpp (test_access): Avoid use rw_match() for
	comparing the single characters.
	* 21.string.copy.cpp (test_copy): Ditto.

2007-06-29  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.globals.mt.cpp (<cwchar>): #included for mbstate_t.

2007-06-28  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.cons.mt.cpp: New test exercising the thread safety
	of locale ctors.
	* 22.locale.globals.mt.cpp: New test exercising the thread safety
	of therequired specializations of the std::has_facet and
	std::use_facet function templates.

2007-06-28  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.num.put.cpp (inf_nan_test): New function template
	to exercise the formatting of infinities and, when enabled,
	(quiet) NaNs, including STDCXX-461.

2007-06-28  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.moneypunct.mt.cpp [_REENTRANT] (main): Set the number
	of nthreads to the greater of the number of processors and 2 (for
	uniprocessor systems) by default.
	* 22.locale.money.put.mt.cpp: Same.
	* 22.locale.numpunct.mt.cpp: Same.
	* 22.locale.num.put.mt.cpp: Same.
	* 22.locale.time.put.mt.cpp: Same.

2007-06-28  Martin Sebor  <sebor@roguewave.com>

	* thread.cpp [Linux] (rw_get_cpus): Avoided invoking system utilities
	such as cat and grep using absolute pathnames since they are installed
	in different directories on different distributions of Linux (e.g.,
	grep is in /bin on Red Hat Linux but in /usr/bin on SuSE).

2007-06-27  Martin Sebor  <sebor@roguewave.com>

	* rw_locale.h (rw_opt_locales): New constant pointing to a
	NUL-separated list of locale names specified by the --locales
	command line option (set by the rw_opt_setlocales handler).
	(rw_opt_setlocales): Callback function invoked in response to
	the --locales=<locale-list> command line option to set the
	rw_opt_locales global variable to a NUL-separated list of
	locale names to exercise.
	* locale.cpp (<cstdio>): Avoided #including C++ header (the C
	header is sufficient and preferable).
	(rw_create_locale): Removed std:: qualification from C library
	names.
	(_rw_locale_names): Static global helper.
	(rw_opt_locales): Defined and initialized to refer to the above.
	(rw_opt_setlocale): Defined.
	* 22.locale.moneypunct.mt.cpp (run_test): Used rw_opt_locales.
	(rw_opt_setlocales): Removed definition.
	* 22.locale.time.put.mt.cpp (rw_opt_nthreads): Initialzed to 1,
	and overwrote in main() with the result of rw_get_cpus() when
	thread safety is being exercised.
	(run_test): Used rw_opt_locales.
	(main): Used rw_opt_setlocales to handle the --locales option.
	* 22.locale.num.put.mt.cpp: Same.
	* 22.locale.numpunct.mt.cpp: Same.
	* 22.locale.money.put.mt.cpp: Same.

2007-06-27  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.moneypunct.mt.cpp: Rewrote so as not to rely on localeconv
	but retrieve the "master" data from the C++ locale instead instead.
	(thread_loop_body): Factored out the body of thread_func here.
	(get_format): Removed.
	(rw_opt_nloops): Reduced from 2000000 to 10000 and set to the number
	of tested locales in non-reentrant configurations to speed things up.
	(rw_opt_setlocales): Callback function to process --locales option.
	(main): Set rw_opt_nthreads to rw_get_cpus() in thread-safe configs.
	(--locale=<arg>): New command line option to specify the names of
	locales to test.

2007-06-27  Martin Sebor  <sebor@roguewave.com>

	* locale.cpp [Solaris] (rw_locales): Avoided all locale names
	starting with "iso_8859_" and the name "common" on SunOS, not
	just iso_8859_1. They're all known to cause setlocale() to
	fail.

2007-06-27 Farid Zaripov <Farid_Zaripov@epam.com>

	* thread.cpp (rw_get_cpus) [_WIN32]: Added Windows version of the function.

2007-06-26  Martin Sebor  <sebor@roguewave.com>

	* rw_thread.h (rw_get_cpus): New function to determine the number
	of processors on the system.
	* thread.cpp (rw_get_cpus): Defined it.
	(rw_thread_pool): Called rw_get_cpus() to set nthreads when the
	argument is equal to SIZE_MAX.

2007-06-26 Farid Zaripov <Farid_Zaripov@epam.com>

	* 22.locale.ctype.is.cpp: Added svn:eol-style=native property.
	* 22.locale.ctype.narrow.cpp: Ditto.
	* 22.locale.ctype.scan.cpp Ditto.
	* 22.locale.ctype.tolower.cpp Ditto.
	* 22.locale.ctype.toupper.cpp Ditto.
	* 22.locale.money.put.mt.cpp Ditto.
	* 22.locale.moneypunct.cpp Ditto.
	* 22.locale.moneypunct.mt.cpp Ditto.
	* 22.locale.num.put.mt.cpp Ditto.
	* 22.locale.numpunct.mt.cpp Ditto.
	* 22.locale.time.put.mt.cpp Ditto.

2007-06-26 Farid Zaripov <Farid_Zaripov@epam.com>

	* 22.locale.money.put.mt.cpp: Added Ios::ios() invoking ios_base::init(0).
	* 22.locale.num.put.mt.cpp: The same.
	* 22.locale.time.put.mt.cpp: The same.

2007-06-25 Farid Zaripov <Farid_Zaripov@epam.com>

	* 22.locale.ctype.is.cpp: Check the pointer before dereferencing of it.
	* 22.locale.ctype.narrow.cpp: Ditto.
	* 22.locale.ctype.scan.cpp: Ditto.
	* 22.locale.ctype.tolower.cpp: Ditto.
	* 22.locale.ctype.toupper.cpp: Ditto.

2007-06-23  Martin Sebor  <sebor@roguewave.com>

	STDCXX-457
	* 2.smartptr.shared.cpp: Updated license statement.
	* 2.smartptr.weak.cpp: Same.
	* 27.objects.cpp: Same.
	* rw_alarm.h: Same.
	* rw_printf.h: Same.
	* environ.h: Same.
	* valcmp.h: Same.
	* cmdopt.h: Same.
	* opt_lines.h: Same.
	* opt_diags.cpp: Same.
	* opt_types.h: Same.
	* opt_lines.cpp: Same.
	* opt_diags.h: Same.
	* opt_types.cpp: Same.
	* any.cpp: Same.
	* 21.cctype.cpp: Same.
	* 21.string.access.cpp: Same.
	* 0.new.cpp: Same.
	* 23.deque.iterators.cpp: Same.
	* 19.cerrno.cpp: Same.

2007-06-21  Farid Zaripov  <Farid_Zaripov@epam.com>

	* 18.exception.cpp (RW_SETJMP, RW_LONGJMP): Corrected logic errors
	introduced in r548112 and used setjmp() and longjmp() as opposed to
	sigsetjmp() and siglongjmp() except on Linux.

2007-06-19  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.numpunct.mt.cpp (<ios>): Removed #include directive.
	(run_test): Set LC_ALL rather than just LC_NUMERIC in order to
	get reliable results from mbstowcs().

2007-06-19  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.moneypunct.mt.cpp: New test exercising the thread safety
	of all four required specializations of the std::moneypunct facet.

2007-06-19  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.numpunct.mt.cpp: New test exercising the thread safety
	of the numpunct facet.

2007-06-18  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.money.put.mt.cpp: New test exercising the thread safety
	of the money_put facet (including moneypunct).

2007-06-18  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.num.put.mt.cpp: New test exercising the thread safety
	of the required specializations of the num_put facet (including
	numpunct).

2007-06-18  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 22.locale.time.put.mt.cpp: Test exercising the thread safety
	of the required specializations of the std::time_put facet.

2007-06-18  Martin Sebor  <sebor@roguewave.com>

	* 26.valarray.sub.stdcxx-448.cpp: Regression test for STDCXX-448.

2007-06-17  Scott Zhong  <scottz@roguewave.com>

	* 22.locale.ctype.is.cpp: Test exercising ctype::is()
	* 22.locale.ctype.narrow.cpp: Test exercising ctype::narrow().
	* 22.locale.ctype.scan.cpp: Test exercising the ctype::scan_xxx()
	family of functions.
	* 22.locale.ctype.tolower.cpp: Test exercising ctype::tolower().
	* 22.locale.ctype.toupper.cpp: Test exercising ctype::toupper().

2007-06-17  Scott Zhong  <scottz@roguewave.com>
	    Martin Sebor <sebor@roguewave.com>

	* rw_locale.h (rw_create_locale): New helper function to invoke
	the stdcxx localedef utility to create a stdcxx locale.
	* locale.cpp ((rw_create_locale): Defined.

2007-06-17  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.codecvt.out.cpp (mb_char_array_t, get_mb_char,
	find_mb_locale): Removed/replaced...
	(rw_mbchar_array_t, rw_find_mb_locale): ...with these replacement
	type and functions defined in the test driver.

2007-06-17  Martin Sebor  <sebor@roguewave.com>

	* rw_locale.h (rw_mbchar_array_t, rw_get_mb_chars, rw_find_mb_locale):
	New type and helper functions to retrieve locales that use multibyte
	encodings (where MB_CUR_MAX > 1).

2007-06-17  Martin Sebor  <sebor@roguewave.com>

	* 21.string.push_back.mt.cpp [!_RWSTD_REENTRANT](rw_opt_nthreads): Set
	to 1 in "single-threaded" builds.
	(thread_func, run_test): Removed gratuitous output.
	(run_test): Added rw_error() calls checking the successful creation
	of thread pools.

2007-06-17  Martin Sebor  <sebor@roguewave.com>

	* 21.string.cons.mt.cpp [!_RWSTD_REENTRANT](rw_opt_nthreads): Set
	to 1 in "single-threaded" builds.
	(run_test): Added rw_error() calls checking the successful creation
	of thread pools.

2007-06-17  Martin Sebor  <sebor@roguewave.com>

	* rw_thread.h: Added comments.

2007-06-17  Martin Sebor  <sebor@roguewave.com>

	* thread.cpp [!_RWSTD_REENTRANT] (rw_thread_pool): When not reentrant
	 (in non-thread safe builds) emulated the creation of a single thread
	and then waiting for it to finish by simply calling the thread
	procedure to simplify the logic in each test.

2007-06-17  Martin Sebor  <sebor@roguewave.com>

	* 18.exception.cpp (RW_JMP_BUF, RW_LONGJMP, RW_SETJMP): New macros
	to hide calls to siglongjmp() and sigsetjmp() on Linux while making
	calls to longjmp() and setjmp() everywhere else.
	(induce_exception): Used size_t instead of unsigned long
	as an argument to operator new().
	(SIGABRT_handler, test_terminate_handler, test_unexpected_handler):
	Used RW_LONGJMP() instead of plain longjmp().
	(test_runtime, run_test): Used RW_SETJMP() instead of plain setjmp().
	(run_test): Called test_effects() last to defer potential problems
	due to the tests returning (jumping) out of the handlers.

2007-06-17  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp (test_dec): Exercised long and long long formatting.
	(test_nested_format): Added comments.

2007-06-13  Martin Sebor  <sebor@roguewave.com>

	* 21.string.cons.mt.cpp: New test exercising the thread safety
	of a small subset of basic_string ctors and assignment operators.

2007-06-13 Farid Zaripov <Farid_Zaripov@epam.com>

	* 27.stringbuf.members.stdcxx-427.cpp: new test from STDCXX-427 issue

2007-06-06 Farid Zaripov <Farid_Zaripov@epam.com>

	* 23.bitset.cons.stdcxx-297.cpp: new test from STDCXX-297 issue

2007-06-06 Farid Zaripov <Farid_Zaripov@epam.com>

	* 23.list.cons.stdcxx-268.cpp: new test from STDCXX-268 issue

2007-06-06 Farid Zaripov <Farid_Zaripov@epam.com>

	* 23.deque.special.stdcxx-127.cpp: new test from STDCXX-127 issue

2007-06-06 Farid Zaripov <Farid_Zaripov@epam.com>

	* 23.list.special.stdcxx-334.cpp: new test from STDCXX-334 issue

2007-06-06 Farid Zaripov <Farid_Zaripov@epam.com>

	* 23.list.insert.stdcxx-331.cpp: new test from STDCXX-331 issue

2007-06-03  Martin Sebor  <sebor@roguewave.com>

	STDCXX-135
	* 0.printf.cpp (test_string): Added a test for the format being
	the empty string ("").

2007-05-28  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.num.get.cpp (do_test): Disabled grouping tests when
	rw_opt_no_grouping is non-zero in response to the --no-grouping
	command line option.
	(test_llong, test_ullong): Better exercised long long parsing,
	including STDCXX-402.

2007-05-25  Martin Sebor  <sebor@roguewave.com>

	STDCXX-426
	* 21.cwchar.cpp (test_file_functions): Opened a new file for I/O
	instead of reusing stdout and called fwide() first before any prior
	output since 7.19.2, p5 of C99 prohibits wide character I/O functions
	from being called on a byte-oriented stream.

2007-05-24  Martin Sebor  <sebor@roguewave.com>

	* alg_test.h (InputIter): Outlined member functions too big for
	the gcc inliner to handle (causing noise for -Winline warnings).
	(OutputIter): Ditto.

2007-05-23 Farid Zaripov <Farid_Zaripov@epam.com>

	* 22.locale.codecvt.length.cpp: Added checking result of the rw_locales()
	before dereferencing.
	* 22.locale.codecvt.out.cpp: Ditto.
	* 22.locale.ctype.cpp: Ditto.
	* 22.locale.messages.cpp: Ditto.
	* 22.locale.moneypunct.cpp: Ditto.
	* 22.locale.num.put.cpp: Ditto.
	* 22.locale.time.get.cpp: Ditto.
	* 22.locale.num.get.cpp: Ditto. Corrected len parameter of the rw_widen().
	* 0.inputiter.cpp [_MSC_VER]: Disabled GUI window from abort().
	* 0.outputiter.cpp [_MSC_VER]: Ditto.
	* 21.cwchar.cpp [_MSC_VER]: Disabled GUI window with error from
	CRT assertion fail.

2007-05-22  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 22.locale.moneypunct.cpp: New test exercising locale.moneypunct.

2007-05-18  Eric Lemings  <lemings@roguewave.com>

	STDCXX-358
	* environ.cpp (rw_putenv): Handled unsetenv() on Darwin the same
	as on FreeBSD: the function is declared to return void on both.

2007-05-15 Farid Zaripov <Farid_Zaripov@epam.com>

	STDCXX-339
	* NONDEDUCED_CONTEXT.cpp: Removed _RWSTD_NO_INLINE_MEMBER_TEMPLATES
	config macro and all workarounds for it. Updated copyright notice.
	* bitset: Ditto
	* deque: Ditto
	* iomanip: Ditto
	* list: Ditto
	* _locale.h: Ditto
	* map: Ditto
	* queue: Ditto
	* _algobase.h: Ditto
	* _defs.h: Ditto
	* _pair.h: Ditto
	* _tree.h: Ditto
	* set: Ditto
	* string: Ditto
	* string.cc: Ditto
	* vector: Ditto
	* 25.random.shuffle.cpp: Ditto
	* 23.deque.modifiers.cpp: Ditto
	* 23.vector.cons.cpp: Ditto
	* 23.vector.modifiers.cpp: Ditto
	* rw_allocator.h: Ditto
	* 20.pairs.cpp: Ditto

2007-05-15 Farid Zaripov <Farid_Zaripov@epam.com>

	* value.cpp (xinit) Removed as unused.

2007-05-12  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.money.get.cpp (PunctData): New base class for the test
	Punct facet.
	(Punct): Derived from PunctData.
	(narrow, widen): Removed.
	(do_test): Used PunctData instead of Punct. User the testuite helpers
	rw_expand() and rw_narrow() instead of narrow() and widen(). Used the
	%{*Ac} directive to format either narrow and wide character strings.
	(test_memfun): Renamed...
	(test_get): ...to this and used PunctData instead of Punct.
	(test_long_double, test_string): Called test_get().

2007-05-03  Martin Sebor  <sebor@roguewave.com>

	* environ.cpp [FreeBSD] (rw_putenv): Ignored unsetenv() return
	value since the function is declared to return void on FreeBSD.

2007-05-03  Martin Sebor  <sebor@roguewave.com>

	* file.cpp (P_tmpdir): Added a comment.

2007-04-09  Martin Sebor  <sebor@roguewave.com>

	* 21.string.access.cpp (test_access): Cast an argument to
	a (potentially) wider type to silence the pesky HP aCC 3.73
	Warning (suggestion) 887: Type T is smaller than type U,
	unwanted widening in value may result.
	* 21.string.append.cpp (test_append): Same.

2007-04-05  Martin Sebor  <sebor@roguewave.com>

	* valcmp.cpp (rw_fltcmp): Corrected typos in preprocessor conditional.

2007-04-03  Martin Sebor  <sebor@roguewave.com>

	* 21.string.find.last.of.cpp (TEST): Replaced NPOS with -1 to silence
	(the justified) gcc warning: overflow in implicit constant conversion.

2007-04-02  Martin Sebor  <sebor@roguewave.com>

	* 27.ostream.cpp (test_formatted): Corrected wide character format
	directives.

2007-03-29  Martin Sebor  <sebor@roguewave.com>

	* process.cpp (<signal.h>, <sys/types.h>): Included for kill(), pid_t.
	(E2BIG, SIGCHLD, SIGHUP, SIGQUIT, SIGKILL): Defined if not defined by
	system headers.
	(kill): Declared for EDG eccp demo.

2007-03-29  Farid Zaripov <Farid_Zaripov@epam.com>

	* 21.string.io.cpp: Used std::size_t instead of size_t.

2007-03-29  Farid Zaripov <Farid_Zaripov@epam.com>

	* 23.list.assign.cpp: Used std::size_t instead of size_t.
	* 23.list.capacity.cpp: Ditto.
	* 23.list.cons.cpp: Ditto.
	* 23.list.erase.cpp: Ditto.
	* 23.list.insert.cpp: Ditto.
	* 23.list.iterators.cpp: Ditto.

2007-03-28  Farid Zaripov <Farid_Zaripov@epam.com>

	* 23.list.assign.cpp (_rw_advance): Removed static keyword.
	* 23.list.cons.cpp (_rw_advance): Ditto.
	* 23.list.erase.cpp (_rw_advance, _rw_distance): Ditto.
	* 23.list.insert.cpp (_rw_advance, _rw_distance): Ditto.

2007-03-27  Martin Sebor  <sebor@roguewave.com>

	STDCXX-134
	* driver.cpp (rw_vtest): Extended column width to accommodate very
	large values.

	STDCXX-376
	* driver.cpp (rw_vtest): Used floating point arithmetic to avoid
	integer overflow on very large values.

2007-03-27  Martin Sebor  <sebor@roguewave.com>

	* driver.cpp (_rw_setopt_ulimit): Silenced gcc warning: missing
	initializer for member.
	(rw_vtest): Allowed test source file name to be null.

2007-03-27  Farid Zaripov <Farid_Zaripov@epam.com>

	* 23.list.assign.cpp: New test exercising [lib.list.assign].
	* 23.list.capacity.cpp: New test exercising [lib.list.capacity].
	* 23.list.cons.cpp: New test exercising [lib.list.cons].
	* 23.list.erase.cpp: New test exercising [lib.list.,erase].
	* 23.list.insert.cpp: New test exercising [lib.list.insert].
	* 23.list.iterators.cpp: New test exercising [lib.list.iterators].
	* 23.list.special.cpp: New test exercising [lib.list.special].

2007-03-23  Martin Sebor  <sebor@roguewave.com>

	* 27.stringbuf.virtuals.cpp (test_virtual): Introduced a cast to silence
	gcc warning: comparison between signed and unsigned integer expressions.

2007-03-23  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.money.put.cpp (type_test): Silenced gcc warning:
	comparison between signed and unsigned.

2007-03-23  Martin Sebor  <sebor@roguewave.com>

	* 21.cwctype.cpp (run_test): Explicitly cast the result of wctrans()
	to ptrdiff_t in case the function's return type is a pointer as is
	the case in GNU glibc.

2007-03-14  Eric Lemings  <lemings@roguewave.com>

	STDCXX-359
	* printf.cpp (_rw_vasnprintf_ext): Replaced the use of operator!
	on an enum with operator== to prevent a gcc error on Mac OS X.

2007-03-12  Farid Zaripov <Farid_Zaripov@epam.com>

	* 23.list.h (_rw_equal): Declared extern in order to allow
	it to be found by argument dependent lookup.
	* 23.containers.cpp (enum OverloadId): Added dummy enumeration.

2007-03-09  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 22.locale.codecvt.length.cpp: New test exercising the member function
	std::codecvt::length().

2007-03-08  Martin Sebor  <sebor@roguewave.com>

	* 27.istream.fmat.arith.cpp (make_locale): Hardcoded array size
	to UCHAR_MAX to work around a gcc 3.4 bug described in STDCXX-351.

2007-03-08  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp (TEST_SPEC): Introduced a local variable to silence
	compiler warnings about controlling expression being constant.

2007-03-07  Martin Sebor  <sebor@roguewave.com>

	* locale.cpp (_RWSTD_USE_CONFIG): Removed references to macro.
	* driver.cpp (_RWSTD_USE_CONFIG): Ditto.
	* _config-gcc.h (_RWSTD_USE_CONFIG): Ditto.
	* _config-xlc.h (_RWSTD_USE_CONFIG): Ditto.
	* configure.wsf (_RWSTD_USE_CONFIG): Ditto.
	* projects.js (_RWSTD_USE_CONFIG): Ditto.
	* README (_RWSTD_USE_CONFIG): Ditto.

2007-03-07  Farid Zaripov <Farid_Zaripov@epam.com>

	* alloc.cpp: fixed typo (removed comma);
	* 0.alloc.cpp: use setjmp() instead sigsetjmp() on Cygwin

2007-03-05  Andrew Black  <ablack@roguewave.com>

	* tests/src/driver.cpp (_rw_setopt_output_file): Add logic to treat 
	the magic file name of '-' as a reference to stdout.
	* etc/config/GNUmakefile.tst (RUNFLAGS): Specify compatibility mode 
	flags to enable parsing of legacy tests.
	* util/output.cpp (check_compat_test): Adjust seek position to avoid 
	false format errors when an executable contains a very small number 
	of tests.

2007-03-06  Martin Sebor  <sebor@roguewave.com>

	* 18.limits.traps.cpp (try_trap): Renamed from test_trap and declared
	extern in order to allow it to be found by argument dependent lookup.

2007-03-02  Martin Sebor  <sebor@roguewave.com>

	* 27.istream.fmat.arith.cpp (make_locale): Worked around a Sun
        C++ 5.8 bug described in STDCXX-345.

2007-03-02  Martin Sebor  <sebor@roguewave.com>

	* 0.outputiter.cpp: New test exercising the helper class template
	OutputIter.

2007-03-01  Farid Zaripov <FaridZ@kyiv.vdiweb.com>

	* 18.limits.traps.cpp (test_trap): New function to avoid MSVC error C2712:
	Cannot use __try in functions that require object unwinding;
	(test_traps) Used test_trap() function.

2007-02-23 Farid Zaripov <faridz@kyiv.vdiweb.com>

	ChangeLog:
	* 23.list.h: New file with definitions of helpers used in
	clause 23.list tests.
	* 23.containers.cpp: #included 23.list.h; removed definition
	of the temporary struct ListIds; _rw_list_sigcat filled by code.

2007-02-23 Farid Zaripov <faridz@kyiv.vdiweb.com>

	ChangeLog:
	* 21.strings.h: #included 23.containers.h;
	struct StringIds inherited from struct ContainerIds;
	removed definitions of the AllocId and IteratorId.
	* 23.containers.h: New file with definitions of helpers used
	in clause 23 tests.
	* 23.containers.cpp: Ditto.

2007-02-23 Farid Zaripov <faridz@kyiv.vdiweb.com>

	ChangeLog:
	* rw_value.h (struct UserData): new common structure holding
	value for UserPOD and UserClass types;
	(UserPOD): New user type to be used in tests as POD type
	* value.cpp: Use UserClass::data_.val_ instead of UserClass::val_;
	(__rw_from_char): new function to create array of the UserXXX type
	from string;
	(_rw_mismatch): new function compare the array of the UserXXX type
	and string.
	* 25.binary.search.cpp: Use UserClass::data_.val_ instead of UserClass::val_.
	* 25.copy.cpp: The same.
	* 25.equal.range.cpp: The same.
	* 25.fill.cpp: The same.
	* 25.find.cpp: The same.
	* 25.find.end.cpp: The same.
	* 25.for.each.cpp: The same.
	* 25.generate.cpp: The same.
	* 25.heap.cpp: The same.
	* 25.includes.cpp: The same.
	* 25.lex.comparison.cpp: The same.
	* 25.libc.cpp: The same.
	* 25.lower.bound.cpp: The same.
	* 25.merge.cpp: The same.
	* 25.min.max.cpp: The same.
	* 25.mismatch.cpp: The same.
	* 25.nth.element.cpp: The same.
	* 25.partial.sort.cpp: The same.
	* 25.partitions.cpp: The same.
	* 25.permutation.cpp: The same.
	* 25.random.shuffle.cpp: The same.
	* 25.remove.cpp: The same.
	* 25.replace.cpp: The same.
	* 25.reverse.cpp: The same.
	* 25.rotate.cpp: The same.
	* 25.search.cpp: The same.
	* 25.set.difference.cpp: The same.
	* 25.set.intersection.cpp: The same.
	* 25.set.sym.difference.cpp: The same.
	* 25.set.union.cpp: The same.
	* 25.sort.cpp: The same.
	* 25.swap.cpp: The same.
	* 25.transform.cpp: The same.
	* 25.upper.bound.cpp: The same.
	* 23.deque.modifiers.cpp: The same.
	* 23.vector.modifiers.cpp: The same.
	* 26.accumulate.cpp: The same.
	* 26.adjacent.diff.cpp: The same.
	* 26.inner.product.cpp: The same.
	* 26.partial.sum.cpp: The same.
	* 26.valarray.cons.cpp: The same.
	* 0.inputiter.cpp: The same.
	* 20.pairs.cpp: The same.

2007-02-23 Farid Zaripov <faridz@kyiv.vdiweb.com>

	ChangeLog:
	* rw_value.h (_rw_user_class_fmat_init): New static variable
	to install the formatting callback function for UserClass type.
	* value.cpp (_rw_fmtxarray): Removed prototype of the function.
	Installation of the formatting callback function moved from
	UserClass ctor to UserClassFmatInit ctor.

2007-02-21 Farid Zaripov <faridz@kyiv.vdiweb.com>

	ChangeLog:
	* rw_value.h (struct X): Renamed to struct UserClass.
	* value.cpp: The same.
	* 25.adjacent.find.cpp: Updated copyright notice.
	#included rw_value.h; used struct UserClass instead of struct X.
	* 25.binary.search.cpp: The same.
	* 25.copy.cpp: The same.
	* 25.equal.cpp: The same.
	* 25.equal.range.cpp: The same.
	* 25.fill.cpp: The same.
	* 25.find.cpp: The same.
	* 25.find.end.cpp: The same.
	* 25.find.first.cpp: The same.
	* 25.for.each.cpp: The same.
	* 25.generate.cpp: The same.
	* 25.heap.cpp: The same.
	* 25.includes.cpp: The same.
	* 25.lex.comparison.cpp: The same.
	* 25.libc.cpp: The same.
	* 25.lower.bound.cpp: The same.
	* 25.merge.cpp: The same.
	* 25.min.max.cpp: The same.
	* 25.mismatch.cpp: The same.
	* 25.nth.element.cpp: The same.
	* 25.partial.sort.cpp: The same.
	* 25.partitions.cpp: The same.
	* 25.permutation.cpp: The same.
	* 25.random.shuffle.cpp: The same.
	* 25.remove.cpp: The same.
	* 25.replace.cpp: The same.
	* 25.reverse.cpp: The same.
	* 25.rotate.cpp: The same.
	* 25.search.cpp: The same.
	* 25.set.difference.cpp: The same.
	* 25.set.intersection.cpp: The same.
	* 25.set.sym.difference.cpp: The same.
	* 25.set.union.cpp: The same.
	* 25.sort.cpp: The same.
	* 25.swap.cpp: The same.
	* 25.transform.cpp: The same.
	* 25.unique.cpp: The same.
	* 25.upper.bound.cpp: The same.
	* 23.deque.modifiers.cpp: The same.
	* 23.deque.special.cpp: The same.
	* 23.vector.capacity.cpp: The same.
	* 23.vector.cons.cpp: The same.
	* 23.vector.modifiers.cpp: The same.
	* 26.accumulate.cpp: The same.
	* 26.adjacent.diff.cpp: The same.
	* 26.inner.product.cpp: The same.
	* 26.partial.sum.cpp: The same.
	* 26.valarray.cons.cpp: The same.
	* 0.inputiter.cpp: The same.
	* 20.pairs.cpp: The same.

2007-02-21 Farid Zaripov <faridz@kyiv.vdiweb.com>

	ChangeLog:
	* rw_sigdefs.h: New file with definitions of helpers macros
	to define member and non-member functions overload id's
	* 21.strings.h: Helper macros moved from here to rw_sigdefs.h

2007-02-21 Farid Zaripov <faridz@kyiv.vdiweb.com>

	ChangeLog:
	STDCXX-341
	* alg_test.h: ConstFwdIter<T> inherited from FwdIter<const T>.
	ConstBidirIter<T> inherited from BidirIter<const T>.
	ConstRandomAccessIter<T> inherited from RandomAccessIter<const T>.
	(make_iter): type of the last parameter changed to const reference

2007-02-21 Farid Zaripov <faridz@kyiv.vdiweb.com>

	ChangeLog:
	* alg_test.h (struct X, struct UnaryPredicate,
	struct BinaryPredicate): Declarations moved from here ...
	* rw_value.h: ... to here (new header file).
	* alg_test.cpp: Updated copyright notice;
	(struct X, struct UnaryPredicate, struct BinaryPredicate,
	_rw_fmtxarrayv, _rw_fmtxarray): Definitions moved from here ...
	* value.cpp: ... to here (new source file).

2007-02-15  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (VarArgs): Made pargs_ non-const.
	(VA_ARG): Removed a const cast obviated by the above.
	(_rw_fmtexp): Simplified/corrected the uses of VA_ARG.

2007-02-13  Martin Sebor  <sebor@roguewave.com>

	* src/printf.cpp (_rw_fmtnested): New function to handle nested
	formatting directives (%{@} et al) extended to format arrays of
	values of arbitrary types, including structures.
	(VarArgs): New stuct to encapsulate variable arguments and arrays.
	(VA_ARG): New macro to extract arguments from VarArgs.
	(_rw_fmtinteger, _rw_vasnprintf_ext, _rw_fmtspec): Used VarArgs.
	(PARAM): Changed it to use VarArgs.
	* test/printf.cpp (test_nested_format): Exercised the above.

2007-02-05  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 27.istream.readsome.cpp: New test exercising the member function
	readsome() of basic_istream.

2007-02-05  Martin Sebor  <sebor@roguewave.com>

	* 27.istream_sentry.cpp (memfun_info): Renamed from just info.
	(test_ok): Called memfun_info w/o "%{$SENTRY}::" (the string
	is prepended by the callee).

2007-02-05  Martin Sebor  <sebor@roguewave.com>

	* istream_sentry.cpp (Streambuf, test_ctor, test_ok): Added
	a template parameter for Traits.
	(test_ctor, test_ok): Removed unnecessary local blocks.
	(test_ctor): Verified that the ctor doesn't affect gcount()
	to exercise STDCXX-329.
	(run_test): Exercised specializations on UserTraits. Handled
	command line options.

2007-02-05  Martin Sebor  <sebor@roguewave.com>

	* src/printf.cpp (_rw_pvasnprintf): Gracefuly handled a null format
	string.
	* self/0.printf.cpp (test_malformed_directives): Exercised the above.

2007-02-05  Martin Sebor  <sebor@roguewave.com>

	* 27.istream.fmar.arith.cpp: Renamed...
	* 27.istream.fmat.arith.cpp: to this.

2007-01-31  Martin Sebor  <sebor@roguewave.com>

	* 27.istream.fmat.arith.cpp: New test exercising arithmetic extractor
	operators [istream.formatted.arithmetic]. The test reveals a number
	of known bugs.

2007-01-30  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 27.istream.sentry.cpp: New test exercising [istream.sentry].

2007-01-28  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (_rw_fmtspec): Avoided handling '$' when it's immediately
	followed by a closing curly brace ('}'). Ditto for '@'.
	(_rw_pvasnprintf): New. Implements the guts of rw_vasnprintf without
	NUL-terminating the buffer to make it easier to call it recursively.
	(_rw_vasnprintf_ext): Recognized the new %{@} directive (nested format
	specifier). Called _rw_fmtexpr to handle it.
	(_rw_fmtexpr): Handled the %{@} directive (nested format specifier).
	* test/printf.cpp (test_envvar): Added test cases exercising
	unconditional assignment (the %{$<param>!:<word>} directive).
	(test_nested_format): Exercised the %{@} directive.

2007-01-25  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 27.istream.manip.cpp: New test exercising istream.manip.

2007-01-15  Martin Sebor  <sebor@roguewave.com>

	* 26.valarray.cons.cpp: New test exercising valarray constructors.

2007-01-11  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h (arg_type): Explicitly cast an enum to int before
	applying bitwise operators to it to silence bogus Sun C++ warning:
	"Comparing different enum types."
	* 21.string.operators.cpp (test_operators): Same.
	* 21.string.cons.cpp (test_cons): Same.
	* 21.string.io.cpp (test_io): Same.

2007-01-11  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_rw_sigcat, rw_setvars, _rw_dispatch, _rw_run_cases):
	Explicitly cast an enum to int before applying bitwise operators to it
	to silence (bogus) Sun C++ warning: "Comparing different enum types."

2007-01-11  Martin Sebor  <sebor@roguewave.com>

	* money_put.cpp (MoneyPut): Defined the default ctor in order
	to make it possible to define const objects of the type w/o
	explictly initializing them and to silence IBM XLC++ warning
	1540-1296 (W) The const object requires "struct MoneyPut<T>"
        to have a user-declared default constructor.
	(type_test): Qualified sprintf with std:: since the function
	may not be declared in the global namespace (as with Sun C++).

2007-01-11  Martin Sebor  <sebor@roguewave.com>

	* 26.accumulate.cpp (size_t): Qualifed with std:: since the type
	may not be declared in the global namespace (e.g., with Sun C++).

2007-01-06  Martin Sebor  <sebor@roguewave.com>

	* 26.mask.array.cpp: New test exercising helper class template
	std::mask_array.

2007-01-02  Martin Sebor  <sebor@roguewave.com>

	* 26.indirect.array.cpp: New test exercising the std::indirect_array
	helper template.

2007-01-01  Martin Sebor  <sebor@roguewave.com>

	* 17.names.cpp: Added more public names to test for.

2006-12-22  Martin Sebor  <sebor@roguewave.com>

	* 26.class.gslice.cpp (make_array): Corrected an off-by-1 error.
	(test_gslice): Exercised gslice copy ctor.

2006-12-18  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 26.class.gslice.cpp: New test exercising lib.class.gslice.

2006-12-01  Martin Sebor  <sebor@roguewave.com>

	* 21.string.find.first.not.of.cpp (test_find_first_not_of): Inverted
	the logic of a controlling expression in an unconditional assertion.

2006-12-01 Farid Zaripov <faridz@kyiv.vdiweb.com>

	* process.cpp: Removed unused #include <time.h>
	(rw_waitpid): Used sleep() instead of nanosleep()
	(rw_process_kill): Corrected timeout value to 1 second

2006-11-29  Martin Sebor  <sebor@roguewave.com>

	* cwchar.cpp (wprintf, wscanf, swprintf): Gave the last formal
	argument prior to the ellipsis a name in order to silence SGI
	MIPSpro warning: the last argument of the varargs function is
	unnamed.
	(swscanf, vfwprintf): Removed an undeducible template parameter.

2006-11-29  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (TEST_SPEC): Avoided the use of a conditional
	intended to always evaluate to the same value except at
	runtime in order to prevent compiler warnings.

2006-11-29  Martin Sebor  <sebor@roguewave.com>

	* fmt_bits.cpp (_rw_fmtbits): Inverted a controlling expression
	in an uncoditional assertion.

2006-11-17 Farid Zaripov <faridz@kyiv.vdiweb.com>

	* process.cpp (rw_process_create) [!_WIN32]: Added missing __FILE__, __LINE__

2006-11-16  Martin Sebor  <sebor@roguewave.com>

	* valcmp.cpp (test_case): Used size_t instead of unsigned in order
	to silence HP aCC Warning (suggestion) 887: Type 'unsigned int' is
	smaller than type 'unsigned long', unwanted widening in value may
	result.
	(cases, test_all_cases): Ditto.

2006-11-15  Martin Sebor  <sebor@roguewave.com>

	* 21.find.last.not.of.cpp (cptr_size_size_test_cases): Cast NPOS
	to int to silence Compaq C++ warning: integer conversion resulted
	in truncation.
	Stripped trailing whitespace.

2006-11-14  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (test_errno): Removed assumption that strerror()
	never returns a null pointer (see STDCXX-305).

2006-11-10  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp (TEST_SPEC): Avoided using constant controlling
	expression in do/while loop to silence annoyning EDG warnings.

2006-11-09  Martin Sebor  <sebor@roguewave.com>

	* process.cpp: ( __PURE_CNAME): Undefined Compaq/C++ macro to allow
	POSIX errno constants such as EACCES to be #defined even in strict
	mode.

2006-11-08 Farid Zaripov <faridz@kyiv.vdiweb.com>

	* rw_process.h (rw_pid_t): The type long changed to _RWSTD_SSIZE_T.
	(rw_wait_pid): Added the timeout parameter.
	(rw_process_kill): New function to terminate the specified process.
	* process.cpp [_WIN32] (__rw_map_errno): New function to get errno
	value from WinAPI last error code
	(__rw_split_cmd): Moved to #ifndef _WIN32/#endif
	[_WIN32] (_rw_vprocess_create): Used CreateProcess instead of
	rw_process_create(char*, char* [])
	[_WIN32] (rw_process_create): Used rw_process_create(char*, ...)
	instead of spawnp
	* 0.process.cpp: New test exercising the rw_process_create(),
	rw_process_kill() and rw_waitpid() functions.

2006-11-07 Farid Zaripov <faridz@kyiv.vdiweb.com>

	* fmt_defs.h: Added definition of the DummyStruct
	* printf.cpp (rw_vasnprintf): Added checking for malformed directive
	(_rw_fmttm, _rw_fmtarray, _rw_fmtstrarray, _rw_fmtstr, _rw_fmtwstr):
	Third parameter of __rw::__rw_memattr() changed to -1
	(_rw_vasnprintf_ext): Ditto. Added "%{P}" formating directive to
	format the rw_pid_t value
	* 0.printf.cpp: #included rw_process.h for rw_pid_t
	(test_chararray): Added missing backslash in result string
	(test_stringarray): Added exercising of the "%{ As}" formatting
	directive
	(test_pid): New function exercising the "%{P}" formating directive
	(main): Added call to the test_pid()

2006-10-23 Farid Zaripov <faridz@kyiv.vdiweb.com>

	* printf.cpp (_rw_fmtstrarray): Use ' ' as delimiter if
	' ' is specified in flags field

2006-10-19 Farid Zaripov <faridz@kyiv.vdiweb.com>

	* alloc.cpp (_rw_allocate_blocks): Set r/w access to the
	_rw_tail->next before modification

2006-10-19 Farid Zaripov <faridz@kyiv.vdiweb.com>

	* driver.h (rw_enable): New function to enable/disable
	specified diagnostics
	* driver.cpp (rw_enable): New function to enable/disable
	specified diagnostics
	(_rw_vdiag): Added checking whether the diagnostic
	is enabled or disabled
	* opt_trace.h: Added declaration of the _rw_diag_ignore variable
	* opt_trace.cpp: Added definition of the _rw_diag_ignore variable

2006-10-10 Farid Zaripov <faridz@kyiv.vdiweb.com>

	* environ.cpp (rw_putenv): Added missing semicolon

2006-10-09  Martin Sebor  <sebor@roguewave.com>

	* environ.cpp (unsetenv): Conditionally declared.
	(rw_putenv): Handled invalid separator character.
	Handled malloc() failure to allocate memory.
	Used unsetenv() when available, otherwise putenv().

2006-10-09  Martin Sebor  <sebor@roguewave.com>

	* alloc.cpp (MAP_PRIVATE, MAP_ANONYMOUS): #defined to 0 when not
	#defined in system headers.

2006-10-06  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 23.bitset.cpp: New test exercising lib.bitset.

2006-10-06  Martin Sebor  <sebor@roguewave.com>

	STDCXX-3
	* rw_rand.h: New. Declarations of testsuite random generator helpers.
	* random.cpp: New. Definitions of the above.

2006-10-03 Farid Zaripov <faridz@kyiv.vdiweb.com>

	Set svn:eol-style property.

2006-10-02 Farid Zaripov <faridz@kyiv.vdiweb.com>

	* _select.h (__rw_is_same): Renamed: yes; no; Type<class T> to:
	_C_yes; _C_no; _C_Type<class _TypeV>
	* 22.locale.num.get.cpp (do_test): Changed type of dummy argument
	from charT to charT* to resolve MSVC 7.0 ambiguity
	* 21.cwchar.cpp (swscanf, vfwprintf): Removed unused template
	parameter SizeT to prevent MSVC 7.0 error:
	error C2783: 'int std::swscanf(const WCharT *,const WCharT *,...)' :
	could not deduce template argument for 'SizeT'
	(fgetwc): Return type changed to wint_t to prevent MSVC 7.0 error:
	error C2785: 'int std::fgetwc(FileT *)' and 'wint_t fgetwc(FILE *)'
	have different return types
	(test_functions): commented const to prevent MSVC 7.0 error:
	error C2147: 'tm_buf' : const automatic array must be fully
	initialized
	* 21.cwctype.cpp (towlower, towupper, wctrans, wctype, towctrans):
	Corrected return type to prevent MSVC 7.0 error:
	error C2785: 'int std::towlower(T)' and 'wchar_t towlower(wchar_t)'
	have different return types
	(run_test): Added exercising of the std::towctrans()
	* 26.c.math.cpp (test_declarations): Resolved MSVC 7.0 ambiguity:
	error C2782: 'T std::modf(T,T *)' : template parameter 'T' is
	ambiguous: could be 'double' or 'long double'
	* 27.forward.cpp [_RWSTD_NO_PART_SPEC_OVERLOAD]: Added is_same_type
	for compilers which not support the partial ordering of function
	templates
	* 25.search.cpp [_MSC_VER <= 1300]: Added explicit definition of the
	NonPredicateTag<X>::DummyPredicate::funcalls_ to prevent MSVC 7.0
	linker error
	* alg_test.h [_MSC_VER <= 1300] (conv_to_bool): UniquePtr defined
	as const void* to deal with MSVC 7.0

2006-10-01  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 17.names.cpp: New test exercising the absence of namespace pollution.

2006-09-22 Farid Zaripov <faridz@kyiv.vdiweb.com>

	* limits [_RWSTD_NO_CLASS_PARTIAL_SPEC]: Corrected macro _RWSTD_SPECIALIZE_LIMITS
	* rw_char.h (UserInt): Added const_cast to avoid MSVC 7.0 error "C2446: '=='
	: no conversion from 'const int *' to 'void *const '"
	* _autoptr.h (__rw_nonvoid_ref): Added #ifndef _RWSTD_NO_CV_VOID_SPECIALIZATIONS/#endif
	to avoid error on MSVC 7.0 (http://www.dotnet247.com/247reference/msgs/1/7727.aspx)
	* _specialized.h (__rw_construct) [_RWSTD_NO_PART_SPEC_OVERLOAD]: Added code to deal
	with compilers, which are not supports the "Partial Ordering of Function Templates"
	* VA_LIST.cpp (va_list_array_size) [_RWSTD_NO_CLASS_PARTIAL_SPEC && _RWSTD_NO_PART_SPEC_OVERLOAD]:
	Added code to deal with compilers, which are not supports the "Partial Ordering of Function Templates"
	* CV_VOID_SPECIALIZATIONS.cpp: New file, checking for cv qualifiers on type void
	* 20.operators.cpp: Added #include <cstddef> for std::size_t
	* 20.pairs.cpp: Added #ifdef/#endif guard to avoid error "Cannot access private copy constructor"

2006-09-21 Farid Zaripov <faridz@kyiv.vdiweb.com>

	* 21.string.h (StringState): Added _TEST_EXPORT specification
	* rw_char.h (UserCharFmatInit): Ditto
	* 21.cwchar.cpp: Added #ifndef/#endif guard to avoid double
	function definition
	* 27.objects.cpp (run_test): Corrected rw_warning() to rw_warn()

2006-09-12  Martin Sebor  <sebor@roguewave.com>

	* sstream.cc (str): Avoided setting (pptr() == epptr()) except in
	input mode as required (see lwg issue 562 for clarification). See
	also http://gcc.gnu.org/bugzilla/show_bug.cgi?id=29035.
	* stringbuf_virtuals.cpp (test_seekoff): Corrected tests exercising
	seeking on objects constructed in out mode so as not to assume that
	(pptr() == epptr()) holds after the construction of the stream (in
	fact, (pptr() == pbase()) is required to hold -- see lwg issue 562
	and this issue http://gcc.gnu.org/bugzilla/show_bug.cgi?id=29035
	for more detail).

2006-09-01  Martin Sebor  <sebor@roguewave.com>

	* 26.c.math.cpp (test_behavior): Introduced helper local variables
	and corrected the type of others to match the type returned by the
	called function.

2006-08-28  Martin Sebor  <sebor@roguewave.com>

	* codecvt_out.cpp (get_mb_char): Randomized all bits of a wide
	character. Used the RW_ASSERT() testsuite macro instead of the
	library-configured _RWSTD_ASSERT().
	(test_out): Verified that the tested function doesn't write
	past the end of the converted destination sequence (denoted
	by to_next).
	(test_wcodecvt, test_wcodecvt_byname_table_based): Added test
	cases, comments. Adjusted indentation.

2006-08-26  Martin Sebor  <sebor@roguewave.com>

	* rw_locale.h (rw_locales): Introduced default arguments.

2006-08-26  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* codecvt_out.cpp: New test execising lib.locale.codecvt.virtuals,
	member function do_out.

2006-08-11  Martin Sebor  <sebor@roguewave.com>

	* allocator.cpp (deallocate): Commented out unused function arguments
	to silence HP aCC 3.70 Warning (suggestion) 431: No uses of argument
	were detected; it may be possible to remove its declaration.

2006-08-11  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.money.get.cpp (test_memfun): Avoided relying on
	implementation-defined preprocessor behavior and silenced HP
	aCC 3.70 Warning 823: Redundant preprocessing concatenation
	operation results in two valid preprocessing tokens.

2006-08-10  Martin Sebor  <sebor@roguewave.com>

	* 0.strncmp.cpp (TEST): Avoided unnecessarily casting away constness
	in order to silence gcc warning: cast from `const char*' to `void*'
	discards qualifiers from pointer target type.

2006-08-10  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.num.put.cpp: Added preprocessor guards to disable
	long long tests when the type is not supported.

2006-08-10  Martin Sebor  <sebor@roguewave.com>

	* printf.h (<time.h>): #included for struct tm.

2006-08-09  Martin Sebor  <sebor@roguewave.com>

	* messages.cpp (<stdlib.h>): Removed an unnecessary #include directive.
	(open_catalog): Improved diagnostics to include failure (in addition
	to exception) detection.
	(test_open_close, test_get, test_use_codecvt, test_use_nls_path):
	Simplified the handling of errors from open().
	(stress_test): Removed catalog extension (since it's already present
	in the value of NLSPATH). Replaced hardcoded values with a constant.

2006-08-09  Martin Sebor  <sebor@roguewave.com>

	* new.cpp (_rw_find_block): Corrected a typo in conditionally
	compiled code (Compaq C++ prior to version 6.6).

2006-08-08  Martin Sebor  <sebor@roguewave.com>

	* messages.cpp (test_has_facet): Exercised the behavior of has_facet
	and use_facet with messages_byname (in addition to the base class).
	(test_use_nls_path): Handled getcwd() errors, called open_catalog
	instead of invoking messages::open() directly.
	(open_catalog, test_open_close, test_use_codecvt): Added missing
	argument to rw_assert().
	(stress_test): Asserted a precondition.

2006-08-05  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 23.bitset.cons.cpp: New test exercising lib.bitset.cons.

2006-08-04  Martin Sebor  <sebor@roguewave.com>

	* rw_char.h (to_char): Worked around an Intel C++ 9.1/Windows
	codegen	bug described in STDCCXX-248.

2006-08-01  Martin Sebor  <sebor@roguewave.com>

	* alloc.cpp (CaddrT): New type.
	(munmap): Changed first argument from void* to CaddrT.
	(_rw_table, _rw_table_size, _rw_table_max_size): Renamed from
	table_, table_size_, and table_max_size_ according to the naming
	convention.
	(MemRWGuard::caddr_): Changed type to CaddrT and renamed from
	addr_.
	(_rw_table_free, _rw_table_grow, _rw_table_insert,
	_rw_table_remove, _rw_find_by_addr): Type and naming changes
	according to the above.
	(MAP_FAILED): Changed to a macro.
	(mmap, mprotect): Changed to return/take CaddrT rather than
	void*.
	Removed unnecessary casts.
	(_rw_table_remove): Silenced Sun C++ 5.8 Warning: Conversion
	of 64 bit type value to "char" causes truncation.

2006-07-31  Martin Sebor  <sebor@roguewave.com>

	* alloc.cpp (sig_handler): Declqred extern "C" to avoid errors
	due to the incompatibility between extern "C" ane extern "C++"
	functions.
	(<stddef.h>): Included for size_t.

2006-07-31  Martin Sebor  <sebor@roguewave.com>

	* exception.cpp (<stdlib.h>): Included instead of the non-standard
	<malloc.h> for malloc() and free().
	(ExceptionBase::operator=, format): Replaced calls to the C95
	function strncpy() with strcpy() for portability to C89 systems.

2006-07-31  Martin Sebor  <sebor@roguewave.com>

	* exception.cpp: Replaced Windows \r\n sequences with \n alone.

2006-07-28  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 20.pairs.cpp: New test exercising lib.pairs.

2006-07-28  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 20.function.objects.cpp: New test exercising lib.function.objects.

2006-07-28  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 20.temp.buffer.cpp: New test execising lib.temporary.buffer.

2006-07-27  Martin Sebor  <sebor@roguewave.com>

	* system.h: Removed (moved to <rw_process.h>).
	* system.cpp: Ditto (moved to process.cpp).
	* 22.locale.messages.cpp (<rw_process.h>): Included instead of
	<system.h> to avoid potential clashes with system header of the
	same name.
	* locale.cpp: Ditto.

2006-07-27  Farid Zaripov  <faridz@kyiv.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* rw_process.h: New. Declared test suite process helpers.
	* process.cpp: New. Defined the above.

2006-07-27  Martin Sebor  <sebor@roguewave.com>

	* src/printf.cpp (_rw_fmtstrarray): New function to format argv-style
	(i.e., null-terminated) arrays of NUL-terminated character strings.
	(_rw_vasnprintf_ex): Called _rw_fmtstrarray to process the "%{As}"
	formatting directive.
	* test/0.printf.cpp (test_stringarray): Exercised the above.

2006-07-27  Farid Ziripov <faridz@kyiv.vdiweb.com>
            Martin Sebor  <sebor@roguewave.com>

        * 21.strings.h (rw_setvars): Declared.
        (assert_equal): Changed return type to int.
        * 21.strings.cpp (rw_setvars): Renamed from _rw_setvars and made extern.

2006-07-25  Martin Sebor  <sebor@roguewave.com>

	* rwthread.h: Renamed...
	* rw_thread.h: ...to this according to convention.
	* rwthread.cpp: Renamed...
	* thread.cpp: ...to this.
	* push_back_mt.cpp (<rw_thread.h>): Included instead of rwthread.h.
	* atomic_add.cpp (<rw_thread.h>): Same.
	* atomic_xchg.cpp (<rw_thread.h>): Same.
	* temp_buffer_mt.cpp (<rw_thread.h>): Same.
	* exceptions_mt.cpp (<rw_thread.h>): Same. Replaced a call
	to memset() with zero-initialization of POD.

2006-07-25  Anton Pevtsov <antonp@moscow.vdiweb.com>

	* rwthread.cpp (rw_thread_pool): Passed the value of the thread
	argument rather than its address to the thread being created.

2006-07-24  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 22.locale.ctype.cpp: New test exercising the std::ctype facet.

2006-07-23  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 22.locale.time.get.cpp: New test exercising the std::time_get facet.

2006-07-23  Martin Sebor  <sebor@roguewave.com>

	* 21.string.append.cpp (AppendRangeOverload): Qualified references
	to dependent base member function begin() with this-> to allow lookup
	to find them.
	* 21.string.assign.cpp (AssignRangeOverload): Same.
	* 21.string.cons.cpp (ConsRangeOverload): Same.
	* 21.string.insert.cpp (InsertRangeOverload): Same.

2006-07-20  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.messages.cpp (CodeCvt): Parametrized to make it possible
	to exercise both required specialization of the messages facet.
	Overrode do_always_noconv() to try to make the messages facet use
	the codecvt<char, char>::in().
	(open_catalog, close_catalog): New helpers to reduce code bloat when
	opening and closing catalogs and checking for exceptions.
	(test_open_close, test_get, test_use_codecvt, test_use_nls_path,
	stress_test): Called helpers.

2006-07-19  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.io.cpp (Ctype): Removed as obsolete
	(TEST): test cases updated to exercise the exception safety
	(test_io): Ctype replaced with UserCtype, added exception 
	safety checks with streams

2006-07-19  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* allocator.cpp (_rw_throw_exception): Removed as obsolete 
	(allocate, funcall): The calls to _rw_throw_exception() replaced 
	with calls to rw_throw()
	* new.cpp (BadAlloc): Removed because of another one 
	is defined in exception.cpp
	(operator_new): The throw statement replaced with call 
	to rw_throw(ex_bad_alloc, ..) 
	* rw_streambuf.h (MyStreambuf): Added new method memfun_inx() 
	which returns the index of the method in array ncalls_; 
	added the member throw_when_ to define which virtual 
	method and when should throw the exception;  
	added the member allthrows_ to count the total number 
	of thrown exceptions; 
	added the member allcalls_ to count the total number of
	calls to the virtual methods
	(test): The throw statement replaced with call 
	to rw_throw(ex_stream, ...) 

2006-07-19  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-3
	* rw_exception.h: New header with definition of the Exception class
	and the rw_throw() function
	* exception.cpp: Implementation of the Exception class 
	and the rw_throw() function.

2006-07-18  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 22.locale.messages.cpp: New test exercising lib.locale.messages.

2006-07-18  Martin Sebor  <sebor@roguewave.com>

	* file.h (rw_nextfd): New function.
	* file.cpp (rw_nextfd): Definition.

2006-07-18  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-3
	* 0.alloc.cpp: New test exercising the rw_alloc() and 
	rw_free() functions

2006-07-18  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* rw_alloc.h: Removed RW_PROT_EXEC as unusable
	* alloc.cpp: RW_ASSERT macro replaced with calls to more 
	informative rw_error() / rw_fail() 

2006-07-17  Martin Sebor  <sebor@roguewave.com>

	* src/printf.cpp (_rw_bufcat): Avoided appending NUL to the end
	of buffer and failed consistently when the maximum size of of the
	buffer has been reached.
	(rw_vasnprintf): Allowed buffer length not including the terminating
	NUL to reach its maximum capacity. Reset errno to original value if
	set by a failed call to fprintf (e.g., when the file has been closed).
	(_rw_vasnprintf_ex): Made sure buffer is NUL-terminated before
	invoking user-defined callbacks.
	(rw_snprintfa): Returned (char*)0 on error.
	* test/printf.cpp (stress_bufsize): Stress test to exercised the
	ability to format into a fixed size buffer and correctly report
	buffer overlow errors via ENOMEM.
	(main): Closed stderr before calling stress_bufsize to avoid
	excessive noise.

2006-07-16  Martin Sebor  <sebor@roguewave.com>

	* rw_ctype.h (UserCtype, ctype): Added a ctor overload
	to all specializations.
	* 0.ctype.cpp: Defined the above.

2006-07-16  Martin Sebor  <sebor@roguewave.com>

	* rw_ctype.h (std::ctype<UserChar>): Defined specialization.
	(UserCtype<UserChar>): Defined in terms of the above.
	* src/ctype.cpp (std::ctype<UserChar>): Defined members.
	(UserCtype<UserChar>): Removed definitions of virtual members.
	* test/ctype.cpp (UserCtype::id): Exercised.

2006-07-14  Martin Sebor  <sebor@roguewave.com>

	* alloc.cpp: Renamed driver-private symbols according to the naming
	convention (by prepending the "_rw_" prefix to their names).
	(first, last): Renamed to _rw_head and _rw_tail, respectively.
	(RA_ASSERT): Used instead of the assert() macro.
	Adjusted formatting according to convention.

2006-07-14  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-3
	* rw_alloc.h: New header with the declarations of the rw_alloc 
	and rw_free functions.
	* alloc.cpp: Definitions of the rw_alloc and rw_free functions.

2006-07-13  Martin Sebor  <sebor@roguewave.com>

	* alarm.h: Renamed...
	* rw_alarm.h: ...to this to avoid a name clash on HP-UX.
	* alarm.cpp: Included rw_alarm.h instead of alarm.h.
	* exceptions_mt.cpp: Same.

2006-07-09  Martin Sebor  <sebor@roguewave.com>

	* 0.strncmp.cpp (run_test): Used SIZE_MAX instead of ~0.

2006-07-09  Martin Sebor  <sebor@roguewave.com>

	* src/char.cpp (_rw_get_char): Handled terminating NUL when
	the source string length is specified (i.e., not SIZE_MAX).
	(_rw_expand, rw_match): Passed the length of the source
	string to _rw_get_char.
	* self/0.char.cpp (test_rw_match): Added assertions exercising
	the above (see also the thread at http://tinyurl.com/zf9pm).

2006-07-08  Martin Sebor  <sebor@roguewave.com>

	STDCXX-3
	* rw_ctype.h: New header with the definitions of the UserCtype
	primary template and explicit specializations for char, wchar_t,
	and UserChar.
	* ctype.cpp: Definitions of members of UserCtype specializations.
	* test/ctype.cpp: New test (partially) exercising UserCtype::is().

2006-07-07  Martin Sebor  <sebor@roguewave.com>

	* replace.cpp (ReplaceRangeOverload): Qualified calls to members
	of a dependent base with this-> to allow lookup to find them and
	prevent compilation errors with strict compilers.

2006-07-07  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 25.for.each.cpp: Updated acording to changes in alg_test.h -
	the calls to make_iter replaced with calls to iterators ctors.
	* 25.mismatch.cpp: Same
	* 25.reverse.cpp: Same
	* 25.rotate.cpp: Same

2006-07-05  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_rw_run_test): Avoided making the assumption
	that the range function member template is the last element in
	the array of tests and "optimized" by moving the loop iterating
	over iterator categories and known iterator types into the loop
	that iterates over each function's array of tests. See the
	thread starting at http://tinyurl.com/qsfy3 for more.

2006-07-05  Martin Sebor  <sebor@roguewave.com>

	* fmt_defs.h (_rw_fmtmask): Renamed to _rw_fmtcharmask and added
	a new function with the same name to format ctype_base::mask values.
	* fmt_bits.cpp (_rw_fmtmask): Same.
	* src/printf.cpp (_rw_vasnprintf_ext): Handled the new %{C} and
	%{LC} directives to format the ctype mask of a character argument
	and a ctype_base::mask value, respectively.
	* test/printf.cpp (test_ctype_mask): Exercised the %{LC} directive.
	(main): Called test_ctype_mask.

2006-06-30  Martin Sebor  <sebor@roguewave.com>

	* 21.string.io.cpp (NotEof): Parenthesized.
	(extractor_test_cases): Added test cases.
	(test_io): Simplified, constified locals, added comments,
	used the %{Is} directive to format ios::iostate values,
	and adjusted formatting.

2006-06-30  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_rw_setvars): Formatted the (initial)
	contents of the string argument to string I/O functions.

2006-06-30  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.io.cpp: New test exercising lib.string.io.

2006-06-30  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.strings.h (MemberId): Added new elements for inserter, 
	extractor, getline non-members.
	(OverloadId): Added new enum elements for these non-members and 
	their overloads.
	(ArgId): Added new elements for input and output stream arguments.
	* 21.strings.cpp (_rw_sigcat): Updated to operate with 
	stream arguments and new fids, added new formatting variables
	ISTREAM and OSTREAM processing
	(_rw_setvars): Added new formatting variables ISTREAM and OSTREAM 
	processing to operate with stream arguments in string's non-members.
	* rw_streambuf.h: Added support for UserChar.

2006-06-28  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_rw_dispatch): Detected and diagnosed
	test logic error: null test callback function.

2006-06-28  Martin Sebor  <sebor@roguewave.com>

	* src/char.cpp (_rw_get_char): New helper to parse <char>@<count>
	directives and Unicode <Unnn...> sequences denoting UCS characters.
	(_rw_expand): Called _rw_get_char.
	(rw_match): Called _rw_get_char, optimized and simplified.
	* test/0.char.cpp (test_rw_match): Added test cases and exercised
	the handling of <Unnn...> sequences.
	* 21.string.replace.cpp: Made use of the <Unnnn> directive and
	replaced NUL characters embedded in hardcoded string literals with
	the <U0> Unicode sequence (denoting NUL).

2006-06-28  Anton Pevtsov   <antonp@moscow.vdiweb.com>

	* 21.string.access.cpp: Made use of the <Unnnn> directive and
	replaced NUL characters embedded in hardcoded string literals with
	the <U0> Unicode sequence (denoting NUL).
	* 21.string.access.cpp: Same.
	* 21.string.append.cpp: Same.
	* 21.string.assign.cpp: Same.
	* 21.string.capacity.cpp: Same.
	* 21.string.cons.cpp: Same.
	* 21.string.copy.cpp: Same.
	* 21.string.erase.cpp: Same.
	* 21.string.insert.cpp: Same.
	* 21.string.iterators.cpp: Same.
	* 21.string.operators.cpp: Same.
	* 21.string.plus.cpp: Same.
	* 21.string.plus_equal.cpp: Same.
	* 21.string.substr.cpp: Same.
	* 21.string.swap.cpp: Same.

2006-06-27  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_rw_reverse_results): Conditionally declared
	static to avoid Sun C++ bug/limitation (see STDCXX-207), and
	constified locals.
	(_rw_dispatch): Qualified the call to _rw_reverse_results with
	:: and constified locals.
	Used size_t instead of the _RWSTD_SIZE_T macro intended to be
	used only in headers.

2006-06-23  Martin Sebor  <sebor@roguewave.com>

	* char.cpp (test_user_traits_wchar): Removed from ...wchar_t to
	avoid Emacs syntax highlighting normally used only for types.
	(test_rw_expand): Added test cases.
	(opt_user_traits, ...): Renamed from no_user_traits, ...
	(run_test): Accommodated naming changes above and treated
	options as tristate (rather than two-state switches).
	(main): Changed options from switches to tristate.

2006-06-22  Martin Sebor  <sebor@roguewave.com>

	* stringbuf_virtuals.cpp (<ctsring>, <rw_char.h>): Included.
	(VFun): Added sequence_ member.
	(widen): Removed (obviated by rw_expand declared in <rw_char.h>).
	(test_virtual): Called rw_expand() instead of widen(). Called
	sputn() with pptr() as the first argument when string argument
	is null.
	(test_virtual): Reset strarg_ and sequence_ after each test case.
	(test_xsputn): Used <char>@<repeat-count> directives and added
	new test cases exercising xsputn() with the first argument of
	pptr().

2006-06-22  Martin Sebor  <sebor@roguewave.com>

	* char.cpp (_rw_expand): NUL-terminated expanded string.
	(rw_match): Avoided false positives when detecting whether
	to expand the first argument.

2006-06-22  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (rw_vasnprintf): Used the number of bytes,
	not elements, in the call to memcpy.

2006-06-21  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.rfind.cpp: Added missed header <exception>

2006-06-19  Martin Sebor  <sebor@roguewave.com>

	* fmt_defs.h (_rw_fmtbits): Declared new helper function.
	* fmt_bits.cpp (_rw_fmtbits): Defined it.
	* src/printf.cpp (_rw_vasnprintf_ext): Called _rw_fmtbits in
	response to the %B and %b directives to format bitset values.
	* test/printf.cpp (test_bitset): Exercised the %b directive.
	(test_*): Declared all functions static.

2006-06-19  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.iterators.cpp: New test exercising lib.string.iterators.
	* 21.strings.h (MemberId): Added new elements for data, c_str,
	get_allocator, begin, end, rbegin, rend methods.
	(OverloadId): Added new enum elements for these methods and their 
	overloads.
	* 21.strings.cpp (_rw_setvars): Added support for data, c_str,
	get_allocator, begin, end, rbegin, rend overloads.

2006-06-16  Martin Sebor  <sebor@roguewave.com>

	* 20.specialized.cpp (make_iter): Replaced a template with a couple
	of ordinary functions to avoid tripping up broken compilers such
	as HP aCC 3.63 on argument deduction.

2006-06-16  Martin Sebor  <sebor@roguewave.com>

	* specialized.cpp (type_name): Added an overload for const
	volatile T*.
	(run_test): Exercised std::uninitialized_copy() specialized
	on InputIterator=const volatile int* to further exercise
	STDCXX-203.

2006-06-16  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 20.specialized.cpp: New test exercising lib.specialized.algorithms,
	including STDCXX-203.

2006-06-16  Martin Sebor  <sebor@roguewave.com>

	* alg_test.h (InputIter ctor): Asserted a precondition.
	(InputIter, OutputIter, ...): Changed the actual type
	of difference_type from plain int to ptrdiff_t.
	(make_iter): Made the type of the first argument const T*
	for const iterator overloads of the function template.

2006-06-15  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.strings.cpp (_rw_reverse_results): new helper function to 
	reverse the substring in the resulting sequence
	(_rw_dispatch): updated to reverse the resulting substring for
	the reverse iterators via call to the helper function.
	* 21.string.append.cpp (AppendRangeOverload): Added special
	processing for the reverse iterators.
	(test_append): reverse iterators tests enabled, range classes
	variables renamed for the convenience.
	* 21.string.assign.cpp: Same
	* 21.string.cons.cpp: Same
	* 21.string.insert.cpp: Same
	* 21.string.replace.cpp: Same

2006-06-14  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.strings.cpp (_rw_setvars): ctor_range and ctor_range_alloc 
	cases joined with append_range and assign_range
	* 21.string.cons.cpp: Ctor replaced with Cons according to 
	the naming conventions.
	(ConsRange, ConsRangeOverload): New class templates to abstract out 
	the invocation of the ctor member template and its overloads.
	(test_cons): Added RangeBase& argument and eliminated
	test_cons_range (obviated by the addition of the argument).
	(test_cons): Dispatched to the appropriate specialization
	based on the iterator id (if any).

2006-06-13  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.time.put.cpp (test_POSIX): Avoided exercising the "%Z"
	directive with an invalid tm object (tm_isdst < 0). Added a couple
	of test cases for the same directive (but with a valid tm object).
	See STDCXX-201.

2006-06-13  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.time.put.cpp (do_test): Included the value of the TZ
	environment variable in diagnostics involving the "%Z" or "%z"
	formatting directives.

2006-06-13  Martin Sebor  <sebor@roguewave.com>

	* rw_char.h (UserTraits): Removed the definition of the primary
	template and replaced it with definitions of the two required
	specializations (on char and wchar_t) to avoid Sun C++ 5.8 bugs
	described at http://issues.apache.org/jira/browse/STDCXX-177.
	(TraitsMemFunc): Moved from the primary template to file scope
	and renamed from TraitsFun.
	* char.cpp: Same.

2006-06-12  Martin Sebor  <sebor@roguewave.com>

	* cmdopt.cpp (cmdopts_t): Renamed toggle_ to tristate_.
	(_rw_getbounds): Added a formal argument and handled tristate_
	bit number specification.
	(_rw_match_tristate): Renamed from _rw_match_toggle.
	(_rw_set_bits): New helper.
	(rw_runopts): Handled tristate bit specifications.
	* 0.cmdopts.cpp (test_tristate): Renamed from test_toggles
	and exercised bit specification.

2006-06-12  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 27.ostream.cpp: New test exercising lib.ostream.

2006-06-09  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 27.filebuf.codecvt.cpp: New test exercising lib.filebuf with
	a user-defined codecvt facet.

2006-06-08  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.strings.h (RangeBase): New base class to exercise the range
	template methods overloads - append, assign, insert and replace.
	* 21.strings.cpp (_rw_setvars): append_range and assign_range 
	cases separated from others due to the changes in the 
	corresponding tests.
	* 21.string.append.cpp (AppendRange, AppendRangeOverload): New class
	templates to abstract out the invocation of the append member
	template and its overloads.
	(test_append): Added RangeBase& argument and eliminated
	test_append_range (obviated by the addition of the argument).
	(test_append): Dispatched to the appropriate specialization
	based on the iterator id (if any).
	* 21.string.assign.cpp: Same
	* 21.string.insert.cpp: Same
	* 21.string.replace.cpp (ReplaceBase): moved to 21.strings.h
	and renamed to RangeBase.
	(ReplaceRangeOverload): begin overloads moved to the base class.
	(test_replace): parameter type changed to RangeBase.

2006-06-07  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.swap.cpp (str_test_cases): Added test cases with
	special strings length.
	(test_swap): Added two Allocator parameters, migrated to use 
	StringTestCaseData structure, exception safety testing loop added.
	(main): rw_run_string_test call updated according to 
	test driver changes.

2006-06-06  Anton Pevtsov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	* 21.string.replace.cpp: Added test cases.
	(ReplaceBase, ReplaceRange, ReplaceRangeOverload): New class
	templates to abstract out the invocation of the replace member
	template and its overloads.
	(test_replace): Added ReplaceBase& argument and eliminated
	test_replace_range (obviated by the addition of the argument).
	(test_replace): Dispatched to the appropriate specialization
	based on the iterator id (if any).

2006-06-06  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h (IteratorId): New member type of StringIds.
	(StringFunc): Added a new data member.
	* 21.strings.cpp (_rw_iter_names): New.
	(_rw_opt_char_types, ...): Sized based on the corresponding
	_rw_xxx_names arrays.
	(_rw_sigcat): Used _rw_iter_names in function signatures and
	command line option names.
	(_rw_argno): Renamed from _rw_uses_alloc and generalized.
	(_rw_setvars): Simplified the setting of environment variables
	by using the %{paramater!:word} extended directive.
	(_rw_run_cases): New helper.
	(_rw_run_test): Iterated over all IteratorId's and called
	_rw_run_cases.
	(_rw_add_toggles): New helper.
	(_rw_run_test): Called _rw_add_toggles, installed option
	handlers for iterator specializations of member templates.

2006-06-02  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_rw_setvars): Handled the %{$Iterator} directive in
	formatting of string member function templates.
	(_rw_run_test): Corrected a typo in a conditional formatting directive.

2006-06-02  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (_rw_fmtexpr): Added the %{$parameter!:word} drective
	as an extension and corrected logic error (passing a pointer to an
	auto array to free()).

2006-06-01  Martin Sebor  <sebor@roguewave.com>

	* rw_allocator.h (reset_call_counters, func_name): New functions.
	* allocator.cpp (reset_call_counters, func_name): Implemented.
	(instance): Made sure global instance always exists.

2006-06-01  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_rw_setvars): Corercted the syntax of setenv
	directives.

2006-06-01  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.strings.h (FuncId): Added new elements for capacity mehtods.
	(OverloadId): Added new elements for capacity methods overloads.
	* 21.strings.cpp (_rw_func_names): Added capacity methods names,
	(_rw_setvars): Added cases for capacity methods overloads.
	* 21.string.capacity.cpp: Converted to simplified format
	(MemFun, run_test): removed as obsolete
	(test_capacity): Updated to use the test driver features.
	(main): Updated to use common workflow via test driver functions.

2006-06-01  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.cons.cpp (cptr_test_cases, cstr_test_cases, ...): Added
	new test cases which contains strings with special length to 
	exercise memory allocation,
	(test_cons_range): Changed signature
	to take StringTestCaseData<charT> instead of charT* arrays and
	their sizes and simplified definition.
	(test_cons): Same.
	(DEFINE_STRING_TEST_FUNCTIONS): Used to define an array of
	pointers to specializations of the test_cons template,
	thus obviating the need for the dispatch function.
	(main): Passed test_cons_func_array defined by the macro
	above to rw_run_string_test.
	21.string.append.cpp: Added new test cases which contains strings 
	with special length to exercise memory allocation,
	21.string.assign.cpp: Same
	21.string.insert.cpp: Same
	21.string.op.plus.equal.cpp: Same
	21.string.replace.cpp: Same

2006-05-30  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_rw_dispatch): Corrected the type of the test
	function to match its actual definition in the test.

2006-05-29  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.opertators.cpp: New test exercising 
	lib.string.nonmembers operators.

2006-05-29  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.op.plus.cpp: New test exercising lib.string::op+.

2006-05-29  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.strings.cpp (_rw_sigcat, _rw_setvars): Added 
	workaround for STDCXX-190 - warning silenced.

2006-05-29  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.strings.h (bit_member): Silenced MSVC bogus warning.

2006-05-28  Martin Sebor  <sebor@roguewave.com>

	* 21.string.replace.cpp (test_replace_range): Changed signature
	to takeStringTestCaseData<charT> instead of charT* arrays and
	their sizes and simplified definition.
	(test_replace): Same.
	(DEFINE_STRING_TEST_FUNCTIONS): Used to define an array of
	pointers to specializations of the test_replace template,
	thus obviating the need for the dispatch function.
	(main): Passed test_replace_func_array defined by the macro
	above to rw_run_string_test.

2006-05-28  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h (StringTestCaseData): New helper class template.
	(VoidFunc): New helper typedef.
	(DEFINE_STRING_TEST_FUNCTIONS): New helper macro to define an
	array of pointers to test functions (typically specializations
	of the same function template) and to obviate the need for the
	definition of the dispatch function in each test.
	(rw_run_string_test): Added a new overload taking an array of
	VoidFunc.
	* 21.strings.cpp (<string>, <rw_allocator.h>): Included headers.
	(_rw_dispatch): Added a set of overloaded function templates.
	(_rw_test_case): Added a VoidFunc[] argument and invoked
	_rw_dispatch.
	(_rw_func_array): New global array of pointers to test functions.
	(_rw_run_test): Passed _rw_func_array to _rw_test_case.
	(_rw_run_test): Moved body of rw_run_string_test here.
	(rw_run_string_test): Called _rw_run_test.

2006-05-26  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.replace.cpp (test_replace): Updated the expected_throw 
	value calculating mechanism.
	* 21.string.append.cpp (test cases): Changed the meaning of
	(tcase.bthrow == 0) to enable the testing of exception safety,
	and used -1 to disable.
	(Test, MemFun): Removed unused typedefs.
	(test_replace): Renamed throw_after to throw_count to better
	reflect the purpose of the variable
	Set UserAlloc::allocate() to throw bad_alloc analogously to
	operator new.
	Exercised exception safety in each test case by default (i.e.,
	when tcase.bthrow == 0).
	* 21.string.assign.cpp: Same
	* 21.string.insert.cpp: Same
	* 21.string.op.plus.equal.cpp: Same

2006-05-25  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h (FuncId): Added members, increased to 6 bits.
	(bit_member): New enumerator designating member functions.
	(OverloadId): Added enumerator for operator+, operator==,
	operator!=, and all relational operators.
	* 21.strings.cpp (_rw_func_names): Added function names.
	(_rw_class_name): New helper function to compute the name
	of the basic_string class (string, wstring, or basic_string).
	(_rw_sigcat): Used mnemonics instead of real function names
	for name of options controlling operators (such as operator+).
	Handled non-members correctly.
	(_rw_uses_alloc): New helper to help determine whether a ctor
	overload takes an allocator argument.
	(_rw_setvars): Formatted ctors and non-members correctly.
	Added formatting handlers for missing ctor overloads.
	Added formatting handlers for non-member functions.

2006-05-24  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h: Renamed StringMembers to StringIds, charT to CharId,
	Traits to TraitsId, Allocator to AllocId, and MemberId to FuncId).
	Removed UnknownChar, UnknownTraits, and UnknownAllocator and renamed
	DefaultAllocator and UserAllocator to DefaultAlloc and UserAlloc,
	respectively.
	Changed the prefix of FuncId (previously MemberId) enumerators from
	mem_ to fid_ (function id) to accommodate non-member string functions.
	(ArgId): New enum to encode the type of a single function argument.
	Removed SignatureId.
	(OverloadId): Defined enumerators in terms of FuncId and ArgId.
	Renamed Function to StringFunc, TestCase to StringTestCase, Test to
	StringTest, TestFun to StringTestFunc, run_test to rw_run_string_test,
	and moved all to file scope to make it possible to refer to them
	without qualification.
	(arg_type): New helper to determine the type of a function argument.
	(NPOS): New convenience constant representing std::string::npos.
	Removed long_string, rw_disable_user_allocator, and
	DEFINE_TEST_DISPATCH.
	(TEST_DISPATCH): Accommodated above changes.
	* 21.strings.cpp: Made naming and restructuring changes corresponding
	to the above.
	(_rw_opt_func): New array for toggling (enable/disable) options.
	Replaces _rw_opt_memfun_disabled and _rw_opt_memfun_enabled.
	(_rw_opt_char_types, _rw_opt_traits_types, _rw_opt_alloc_types,
	_rw_opt_self_ref): New arrays replacing _rw_opt_no_char_types,
	_rw_opt_no_traits_types, _rw_opt_no_alloc_types, and
	_rw_opt_no_self_ref.
	(_rw_get_func_inx): New helper. Computes a zero-based index of
	a tested string function from the array of tests supplied by each
	test program.
	(_rw_ilog2): Removed unused static function.
	(_rw_sigcat): New helper. Formats a string function signature
	or the mnemonic used to refer to it on the command line (e.g.,
	"append_val").
	(_rw_test_case): Enhanced the handling of command line options
	to allow to enable specific cases in addition to disabling them.
	(_rw_toggle_options): New helper. Scans an array of enable/disable
	options (toggles) and disables all those not explicitly enabled
	when at least one explicitly enabled option is found.
	(_rw_run_test): Simplified and enhanced by using toggles.
	(rw_run_string_tests): Dynamically constructed a command line
	option specification from the set of tests passed to it by the
	test program. Included function name in the name of the option.
	* 21.string.access.cpp: Accommodated the changes above and simplified.
	* 21.string.append.cpp: Same.
	* 21.string.assign.cpp: Same.
	* 21.string.compare.cpp: Same.
	* 21.string.cons.cpp: Same.
	* 21.string.copy.cpp: Same.
	* 21.string.erase.cpp: Same.
	* 21.string.find.cpp: Same.
	* 21.string.find_first_not_of.cpp: Same.
	* 21.string.find_first_of.cpp: Same.
	* 21.string.find_last_not_of.cpp: Same.
	* 21.string.find_last_of.cpp: Same.
	* 21.string.insert.cpp: Same.
	* 21.string.plus_equal.cpp: Same.
	* 21.string.replace.cpp: Same.
	* 21.string.rfind.cpp: Same.
	* 21.string.substr.cpp: Same.
	* 21.string.swap.cpp: Same.

2006-05-23  Martin Sebor  <sebor@roguewave.com>

	* 18.exception.cpp: Simplified command line option handling
	by using toggles.

2006-05-23  Martin Sebor  <sebor@roguewave.com>

	* cmdopt.cpp (cmdopts_t): Added the toggle_ member.
	(rw_vsetopts): Added the tilde ('~') special character
	denoting a toggle (i.e., and off/on option).
	(_rw_match_toggle): New.
	(rw_runopts): Called _rw_match_toggle.
	* 0.cmdopts.cpp (test_toggles): Added tests for the above.
	(main): Called test_toggles.

2006-05-22  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 18.exception.cpp: Converted to new test driver.

2006-05-19  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h (TEST_DISPATCH): Passed the entire Function object
	to the test function template, not just the OverloadId member.
	* 21.string.access.cpp (OverloadId, Test): Removed unused typedefs.
	(Function): New convenience typedef.
	(test_access): Changed signature to take a Function argument
	rather than just OverloadId. Renamed the cs formal argument
	to tcase to make it more understandable and for consistency
	with other tests.
	* 21.string.append.cpp: Same.
	* 21.string.assign.cpp: Same.
	* 21.string.compare.cpp: Same.
	* 21.string.cons.cpp: Same.
	* 21.string.copy.cpp: Same.
	* 21.string.erase.cpp: Same.
	* 21.string.find.cpp: Same.
	* 21.string.find.first.not.of.cpp: Same.
	* 21.string.find.first.of.cpp: Same.
	* 21.string.find.last.not.of.cpp: Same.
	* 21.string.find.last.of.cpp: Same.
	* 21.string.insert.cpp: Same.
	* 21.string.plus_equal.cpp: Same.
	* 21.string.replace.cpp: Same.
	* 21.string.rfind.cpp: Same.
	* 21.string.substr.cpp: Same.
	* 21.string.swap.cpp: Same.

2006-05-19  Martin Sebor  <sebor@roguewave.com>

	* 21.string.cons.cpp: Removed unnecessary #include directives
	and improved comments.

2006-05-18  Martin Sebor  <sebor@roguewave.com>

	* 21.string.replace.cpp (test cases): Changed the meaning of
	(tcase.bthrow == 0) to enable the testing of exception safety,
	and used -1 to disable.
	(Test, MemFun): Removed unused typedefs.
	(test_replace): Renamed throw_after to throw_count to better
	reflect the purpose of the variable.
	Simplified the conditional computing the expected exception.
	Set UserAlloc::allocate() to throw bad_alloc analogously to
	operator new.
	Exercised exception safety in each test case by default (i.e.,
	when tcase.bthrow == 0).

2006-05-18  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_rw_setvars): Corrected formatting by adding
	the missing %{;} directive.

2006-05-18  Martin Sebor  <sebor@roguewave.com>

	* rw_allocator.h (n_throws_): New member array to keep track
	of the number of exceptions thrown from each member function.
	* allocator.cpp (SharedAlloc ctor): Zero-initialized all arrays.
	(funcall): Incremented the member function call counter regarless
	of whether the call results in an exception or not to parallel
	the same algorithm used in operator_new(). Incremented the
	exception counter, n_throws_, for each thrown exception.

2006-05-18  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h (DEFINE_STRING_TEST_DISPATCH): Used fully qualified
	StringMembers types Function and TestCase instead of relying on
	convenience typedefs defined in each test.

2006-05-18  Martin Sebor  <sebor@roguewave.com>

	* rw_allocator.h (allocator): Changed the class-key from struct
	to class to shut up a bogus MSVC warning.

2006-05-18  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.append.cpp (<rw_allocator.h>): Included.
	(test_append_range, test_append): Added Allocator template
	parameter and function argument.
	(DEFINE_STRING_TEST_DISPATCH): Replaced DEFINE_TEST_DISPATCH.
	* 21.string.access.cpp: Same
	* 21.string.assing.cpp: Same
	* 21.string.compare.cpp: Same
	* 21.string.cons.cpp: Same
	* 21.string.copy.cpp: Same
	* 21.string.erase.cpp: Same
	* 21.string.find.cpp: Same
	* 21.string.find.first.not.of.cpp: Same
	* 21.string.find.first.of.cpp: Same
	* 21.string.find.last.not.of.cpp: Same
	* 21.string.find.last.of.cpp: Same
	* 21.string.insert.cpp: Same
	* 21.string.op.plus.equal.cpp: Same
	* 21.string.rfind.cpp: Same
	* 21.string.substr.cpp: Same
	* 21.string.swap.cpp: Same

2006-05-17  Martin Sebor  <sebor@roguewave.com>

	* vector_modifiers.cpp (main): Removed a duplicate option
	specification.

2006-05-17  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_rw_setvars): Made static.
	Defined the {charT}, {Traits}, and {Allocator} environment variables
	to the name of the character type and the Traits and Allocator
	template arguments specified by each test.
	Removed an extraneous space from the format of the function call.
	Added the missing "|-no-self-ref# " option specification.

2006-05-17  Martin Sebor  <sebor@roguewave.com>

	* 21.string.replace.cpp (test_replace): Corrected the formatting
	of expected result string.
	(test_replace): Used rw_check_leaks() to simplify the detection
	of memory leaks using the user-defined allocator UserAlloc as
	well as replacement operator new (when available).

2006-05-17  Martin Sebor  <sebor@roguewave.com>

	* rw_allocator.h (m_cpy_assign, m_cvt_assign): New constants.
	(UserAlloc::operator=): Defined.
	(rw_check_leaks): Declared and defined new helpers.
	* allocator.cpp (<driver.h>): Included for rw_assert().
	(UserAlloc ctor): Initialized n_refs_.
	(UserAlloc dtor): Invalidated member arrays.
	(_rw_check_leaks): New helper.
	(rw_check_leaks): Defined.

2006-05-16  Martin Sebor  <sebor@roguewave.com>

	* 21.string.replace.cpp (<rw_allocator.h>): Included.
	(test_replace_range, test_replace): Added Allocator template
	parameter and function argument.
	(test_replace): Simplified the checking of calls to traits_type::
	length() in preparation for doing something similar for the user
	defined allocator.
	(DEFINE_STRING_TEST_DISPATCH): Replaced DEFINE_TEST_DISPATCH.

2006-05-16  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h (TEST_DISPATCH): Added an Alloc parameter.
	(DEFINE_TEST_DISPATCH): Introduced a transitional overload of
	the dispatch function template taking an Allocator argument
	and dispatching to the test-defined one which doesn't take
	one.
	(DEFINE_STRING_TEST_DISPATCH): New macro to define a dispatch
	function to invoke a test-defined function template with an
	Allocator argument.
	(rw_disable_user_allocator): Transitional variable to disable
	tests exercising basic_string with a user-defined allocator.
	* 21.strings.cpp (rw_disable_user_allocator): Defined.
	(_rw_run_test): Conditionally enabled tests exercising user
	defined allocators.
	("|-enable-size-const#"): Added a missing command line option.

2006-05-16  Martin Sebor  <sebor@roguewave.com>

	* rw_char.h (rw_get_call_counters): Inlined.
	Adjusted the formatting of function declarations according
	to convention (with function name in column 1).

2006-05-16  Martin Sebor  <sebor@roguewave.com>

	* allocator.cpp (<rw_new.h>): Included for operator_new() and
	operator_delete().
	(allocate, deallocate): Called the operator_new() and operator_delete()
	implementation functions instead of invoking the operators directly.

2006-05-16  Martin Sebor  <sebor@roguewave.com>

	* vector_modifiers.cpp (test_insert): Corrected formatting.
	(test_insert_range): Added test cases exercising STDCXX-179.

2006-05-16  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.swap.cpp: New test exercising lib.string.swap.

2006-05-16  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.append.cpp (push_back_val_test_cases): New array to
	exercise the push_back method.
	(test_append): Added the case to exercise the push_back method.

2006-05-16  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.strings.cpp (_rw_setvars): Added support for swap and push_back
	overloads.

2006-05-16  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.strings.h (MemberId): Added new elements for swap, push_back
	(OverloadId): Added new enum elements for swap and push_back 
	overloads.

2006-05-15  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.cons.cpp: New test exercising lib.string.cons.

2006-05-15  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.access.cpp: New test exercising lib.string.access.

2006-05-15  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.copy.cpp: Converted to simplified format
	(MemFun, run_test): removed as obsolete
	(test_copy): Updated to use test driver features.
	* 21.string.replace.cpp (test_replace_range): Added res_len
	paramter, fixed bug with incorrect expected result string length.
	(test_replace): Updated cal to test_replace_range, fixed bug
	with agruments for the rw_match call. 
 	* 21.string.append.cpp: Replaced LSTR, LLEN, and LPAR in test 
	cases with strings containing the '<char>@<count>' directive(s).
	Corrected errors in expected results involving said strings 
	revealed by the use of the more flexible/reliable directives.
	* 21.string.assing.cpp: Same
	* 21.string.compare.cpp: Same
	* 21.string.copy.cpp: Same
	* 21.string.erase.cpp: Same
	* 21.string.find.cpp: Same
	* 21.string.find.first.not.of.cpp: Same
	* 21.string.find.first.of.cpp: Same
	* 21.string.find.last.not.of.cpp: Same
	* 21.string.find.last.of.cpp: Same
	* 21.string.insert.cpp: Same
	* 21.string.op.plus.equal.cpp: Same
	* 21.string.rfind.cpp: Same
	* 21.string.substr.cpp: Same

2006-05-15  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* char.cpp (rw_match): Fixed the bug with the expanded string length.
	* 21.strings.cpp (_rw_setvars): Added support for access, copy and 
	cons overloads.
	(run_test): Added support for new signature

2006-05-15  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.strings.h (MemberId): Added new elements for access, copy, cons
	(OverloadId): Added new enum elements for access, copy and cons 
	overloads.
	(SignatureId): Added new signature for at (size_type) const

2006-05-14  Martin Sebor  <sebor@roguewave.com>

	* rw_allocator.h: New header with the definition of a user-defined
	allocator class template.
	* allocator.cpp: New source containing definitions of helper classes
	and functions used by the user-defined allocator template.

2006-05-12  Martin Sebor  <sebor@roguewave.com>

	* 21.string.substr.cpp (test_substr): Inverted the expression
	in an unconditional assertion to make it actually fire when it
	gets hit and to silence icc warnings #279: controlling expression
	is constant.

2006-05-12  Martin Sebor  <sebor@roguewave.com>

        * char.cpp (UChar): New convenience typedef.
        (_rw_expand, _rw_fmtstringv): Cast char to unsigned char before
        passing it to isdigit() in order to prevent undefined behavior
        caused by sign extension.

2006-05-08  Martin Sebor  <sebor@roguewave.com>

	* char.cpp (test_rw_expand): Plugged benign memory leaks.

2006-05-08  Martin Sebor  <sebor@roguewave.com>

	* replace.cpp: Replaced LSTR, LLEN, and LPAR in test cases with
	strings containing the '<char>@<count>' directive(s). Corrected
	errors in expected results involving said strings revealed by
	the use of the more flexible/reliable directives. Added more
	test cases exercising self-referential modification.
	(test_replace_range): Added arguments, simplified, documented.
	(test_replace): Used the new rw_expand() instead of rw_widen(),
	added (and disabled for now) checking for memory leaks.

2006-05-08  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_rw_this_file): New.
	(_rw_setvars): Used rw_expand() to expand string arguments containing
	<char>@<count> directives.
	(_rw_test_case): New.
	(_rw_run_test): Factored the body of the innermost loop into
	_rw_test_case() for better readability and called it.

2006-05-08  Martin Sebor  <sebor@roguewave.com>

	* char.cpp (_rw_expand): New "generic" implementation of all three
	rw_expand() overloads. Corrected the handling of empty strings to
	produce a NUL-terminated string of 0 size.
	(rw_expand): Implemented in terms of the generic _rw_expand().
	(rw_match): Used rw_expand() when the first string contains '@'.
	* 0.char.cpp (test_rw_expand): Simplified, verified the correcntess
	of the result size, and added more test cases.

2006-05-08  Martin Sebor  <sebor@roguewave.com>

	* new.cpp (operator_new, operator_delete): Used rw_note() instead
	of rw_error() for tracing. Used the %#p rective to format pointers.

2006-05-08  Martin Sebor  <sebor@roguewave.com>

	* rw_char.h (rw_expand): Declared a set of new utility overloads.
	* src/char.cpp (rw_expand): Defined the above.
	* test/char.cpp (test_rw_expand): (Partially) exercised the above.

2006-05-06  Martin Sebor  <sebor@roguewave.com>

	* 21.string.compare.cpp (test_compare): Used StringState and simplified
	the detection and reporting of exception safety violations. Made naming
	and formatting changes.

2006-05-05  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_rw_setvars): Simplified formatting code
	and the resulting formatted string.
	Corrected the formatting of characters by using the %{#c}
	extended directive.
	Documented formatting convention.

2006-05-05  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_rw_setvars): Used memset() instead of a loop
	to set string elements.

2006-05-05  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (_rw_vfprintf): Called OutputDebugString() to send
	the string into the debugger window only when file is non-zero.

2006-05-05  Martin Sebor  <sebor@roguewave.com>

	* driver.cpp (rw_vtest): Set _rw_ftestout to rw_stdout here
	instead of relying on static initialization. Checked for 0
	before closing.

2006-05-05  Martin Sebor  <sebor@roguewave.com>

	* rw_char.h (UserTraits::n_calls_): Specified array extent in the
	declaration of the array member inside the class instead of its
	definition outside to work around a Sun C++ bug (see STDCXX-177).

2006-05-05  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.strings.h (MemberId): Added new elements for access, copy.
	(OverloadId): Added new enum elements for access and copy overloads.
	* 21.strings.cpp (_rw_setvars): Added support for access and copy
	overloads.
	* 21.string.copy.cpp: Converted to simplified format.
	(MemFun, run_test): removed as obsolete.
	(test_copy): Updated to use test driver features.

2006-05-05  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.substr.cpp: New test exercising lib.string.substr.

2006-05-05  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.strings.cpp (_rw_setvars): Added support for substr
	overloads.

2006-05-05  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.strings.h (MemberId): Added new element for substr.
	(OverloadId): Added new enum elements for substr overloads.

2006-05-04  Martin Sebor  <sebor@roguewave.com>

	* 21.string.append.cpp (test_append): Simplified the handling
	of the _RWSTD_NO_REPLACEABLE_NEW_DELETE config macro.
	* 21.string.assign.cpp (test_assign): Same.
	* 21.string.insert.cpp (test_insert): Same.
	* 21.string.plus_equal.cpp (test_op_plus_eq): Same.
	* 21.string.replace.cpp (test_replace): Same.

2006-05-04  Martin Sebor  <sebor@roguewave.com>

	* rw_new.h (operator new, operator delete): Guarded definitions
	of the replacement operators with _RWSTD_NO_REPLACEABLE_NEW_DELETE
	in order to allow the header to be included unconditionally, w/o
	regard to the setting of the macro, and with no adverse effects
	even when the macro is defined.

2006-05-04  Martin Sebor  <sebor@roguewave.com>

	* 21.string.append.cpp (test_append): Corrected compilation errors
	when _RWSTD_NO_EXCEPTIONS is #defined and verified with
	gcc -fno-exceptions.
	* 21.string.assign.cpp (test_assign): Same.
	* 21.string.copy.cpp (test_assign): Same.
	* 21.string.insert.cpp (test_insert): Same.
	* 21.string.plus_equal.cpp (test_op_plus_eq): Same.
	* 21.string.replace.cpp (test_replace): Same.

i2006-05-04  Martin Sebor  <sebor@roguewave.com>

	* find.cpp (test_find): Used StringState to simplify the detection
	ond reporting of exception safety violations.
	Renamed the cs formal function argument to tcase to make the name
	more descriptive.
	Removed length_error handler.
	Verified the return value for invalid arguments.

2006-05-04  Martin Sebor  <sebor@roguewave.com>

	* testdefs.h (try, catch, RW_CATCH_ALL): Defined based on whether
	the config macro _RWSTD_NO_EXCEPTIONS is or isn't #defined.

2006-05-04  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h (StringState, rw_get_string_stat): New.
	* 21.strings.cpp (StringState::assert_equal): Defined.
	* 21.string.append.cpp (test_append): Used StringState to simplify
	the detection ond reporting of exception safety violations.
	* 21.string.assign.cpp (test_assign): Same.
	* 21.string.insert.cpp (test_insert): Same.
	* 21.string.plus_equal (test_op_plus_eq): Same.
	* 21.string.replace (test_replace): Same.

2006-05-03  Martin Sebor  <sebor@roguewave.com>

	* 21.string.find.cpp: Removed tests for length_error, added new
	test cases.

2006-05-03  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* rw_char.h (rw_get_call_counters): Removed _TEST_EXPORT as
	not needed.

2006-05-03  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.compare.cpp: New test exercising lib.string.comapre.

2006-05-03  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.strings.cpp (_rw_setvars): Added support for compare
	overloads.

2006-05-03  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.strings.h (MemberId): Added new element for compare.
	(OverloadId): Added new enum elements for compare overloads.

2006-05-03  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.append.cpp (get_calls): Moved to rw_char.h
	* 21.string.assign.cpp (test_assign): Added verification
	that Traits::length() is used.
	* 21.string.insert.cpp: Same
	* 21.string.op.plus.equal.cpp: Same
	* 21.string.replace.cpp: Same

2006-05-03  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* rw_char.h (rw_get_call_counters): New functions to retrieve 
	the pointer to n_calls array if it is defined for traits type.

2006-05-02  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_rw_opt_no_self_ref): New option handler.
	(_rw_run_test, run_test): Used _rw_opt_no_self_ref to disable
	tests of self-referential modifying member functions.

2006-05-02  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.find.cpp (NPOS): New constant added
	for convenience.
	(ptr_test_cases, str_test_cases): Updated according 
	to changes in TestCase structure.
	(test_find): res_len renamed to nres according to
	changes in the TestCase structure.
	* 21.string.rfind.cpp: Same
	* 21.string.find.first.of.cpp: Same
	* 21.string.find.last.of.cpp: Same
	* 21.string.find.first.not.of.cpp: Same
	* 21.string.find.last.not.of.cpp: Same

2006-05-02  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.find.first.not.of.cpp: New test exercising 
	lib.string.find.first.not.of.

2006-05-02  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.find.last.not.of.cpp: New test exercising 
	lib.string.find.last.not.of.

2006-05-02  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.find.last.of.cpp: New test exercising 
	lib.string.find.last.of.

2006-05-02  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.find.first.of.cpp: New test exercising 
	lib.string.find.first.of.

2006-05-02  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.rfind.cpp: New test exercising lib.string.rfind.

2006-05-02  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.find.cpp: New test exercising lib.string.find.

2006-05-02  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	*  21.string.erase.cpp (MemFun, EraseTags): Removed as 
	obsolete.
	(void_test_cases, size_test_cases, etc): New arrays of the
	test cases to exercise erase overloads.
	(test_erase): Rewrote to use test cases arrays, exception 
	handling updated.
	(main): Updated to use new test driver features.
	*  21.string.append.cpp (ptr_test_cases, str_test_cases, etc): 
	signature descriptions updated.
	(get_calls): New function returning pointer to n_calls array,
	if it presents in the traits type.
	(test_append): Removed obsolete declarations, added the
	traits::length() use verification.
	*  21.string.assign.cpp (ptr_test_cases, str_test_cases, etc): 
	signature descriptions updated.
	(test_assign): Removed obsolete declarations.
	*  21.string.insert.cpp: Same
	*  21.string.op.plus.equal.cpp: Same
	*  21.string.replace.cpp: Same

2006-05-02  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	*  21.strings.cpp (_rw_memfun_names): Added names for
	find, rfind, find_first_of, etc methods. 
	(_rw_setvars): Added missed signatures to the signatures array,
	added cases for erase method and find methods overloads.
	(run_test): Added options for new signatures. 

2006-05-02  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	*  21.strings.h (SignatureId): Added missed signatures. 
	(MemberId): Added elements for erase, find, rfind, etc,
	set start of elements to 1 << 6 because there are more than
	32 signatures.
	(OverloadId): Added elements for find, rfind, etc overloads.
	(TestCase): res_len member renamed ot nres to be used as
	the expected result value than an integer is expected.

2006-04-27  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_rw_opt_memfun_enabled): New array of option
	flags analogous to _rw_opt_memfun_disabled.
	(_rw_run_test): Used _rw_opt_memfun_enabled to disable options
	when at least one element is non-zero.
	(run_test): Used _rw_opt_memfun_enabled.

2006-04-26  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (_rw_quotechar, _rw_fmtarray): Avoid instantiating
	on wchar_t when the type is not a fundamental type (since it's
	most likely not distinct from one of the types the templates
	have already been instantiated on at this point).

2006-04-26  Martin Sebor  <sebor@roguewave.com>

	* rw_char.h (UserTraits): Added the MemFun struct and the n_calls_
	array to the definition of the primary template for compatibility
	with the UserTraits<UserChar> specialization.

2006-04-25  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h (TEST_DISPATCH): Handled all enumerations
	in conditionals.
	* 21.strings.cpp (_rw_run_test): Corrected the use of indices
	in nested loops.
	Added file and line information to rw_note() invocations for
	context.
	Set _rw_no_exceptions and _rw_no_exception_safety in response
	to the _RWSTD_NO_EXCEPTIONS macro being #defined.
	Set _rw_opt_no_char_types [1] in response to _RWSTD_NO_WCHAR_T
	being #defined.

2006-04-25  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h (run_test): Added function arguments.
	(opt_memfun_disabled, opt_no_user_char, opt_no_char_traits,
	opt_no_user_traits, opt_no_exceptions, opt_no_exception_safety,
	setvars): Removed.
	* 21.strings.cpp (_rw_char_names, _rw_traits_names, _rw_alloc_names,
	_rw_memfun_names): Moved from run_test to file scope to make them
	accessible from other functions.
	(_rw_ilog2): New helper to compute an integral base-2 logarithm.
	(_rw_setvars): Renamed from setvars and gave it internal linkage.
	(_rw_run_test): New helper. Handled command line options common
	to all tests.
	(run_test): Invoked _rw_run_test via a call to rw_test after
	setting and processing command line options common to all tests.
	* 21.string.append.cpp (run_test): Moved body into main and removed.
	(main): Called StringMembers::run_test.
	* 21.string.assign.cpp: Same.
	* 21.string.op.plus.equal.cpp: Same.
	* 21.string.replace.cpp: Same.
	* 21.string.insert.cpp: Same.

2006-04-25  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h (long_string, long_string_len): New static members.
	* 21.strings.cpp (char_names, traits_names, alloc_names): Moved
	from file scope to run_test.
	(run_test): Initialized long_string.
	* 21.string.append.cpp (run_test): Removed initialization
	of long_string,	used the static member declared in 21.strings.h.
	(AppendOverload): Replaced/renamed macro with OverloadId typedef.
	* 21.string.assign.cpp: Same.
	* 21.string.insert.cpp: Same.
	* 21.string.plus_equal.cpp: Same.
	* 21.string.replace.cpp: Same.

2006-04-25 Anton Pevtsov <antonp@moscow.vdiweb.com>

	* 21.strings.h (SignatureId): Added missed signature sig_val.
	(MemberId): Added new element mem_op_plus_eq.
	(OverloadId): Added new elements for += overloads.
	* 21.strings.cpp (setvars): Updated to support operator+=
	overloads, minor formatting bugs fixed.

2006-04-25  Anton Pevtsov <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.plus_equal.cpp: Enhanced and ported to new test driver.

2006-04-25 Anton Pevtsov <antonp@moscow.vdiweb.com>

	* 21.string.append.cpp (range_test_cases): Bug in test case
	description fixed.
	(test_append_range): Typo bug fixed.
	* 21.string.assign.cpp (exceptions): Added elements and renamed
	from exp_exceptions for clarity.
	(test_exceptions): Merged the body of the function into the
	test_assign function and removed the declaration of the former.
	(test_assign): Exercised both the function exception safety and
	the behavior of the function under normal conditions.
	* 21.string.insert.cpp: Same.
	* 21.string.replace.cpp (exceptions): Added elements and renamed
	from exp_exceptions for clarity.
	(size_size_ptr_test_cases, size_size_str_test_cases, etc): Merged
	with equal iterator version arrays.
	(test_exceptions): Merged the body of the function into the
	test_assign function and removed the declaration of the former.
	(test_replace): Exercised both the function exception safety and
	the behavior of the function under normal conditions.

2006-04-24  Martin Sebor  <sebor@roguewave.com>

	* 21.string.append.cpp (exceptions): Added elements and renamed
	from exp_exceptions for clarity.
	(test_exceptions): Merged the body of the function into the
	test_append function and removed the declaration of the former.
	(test_append_range): Constified locals wherever appropriate
	and introduced new helper variables to simplify expressions.
	(test_append): Exercised both the function exception safety
	and the behavior of the function under normal conditions.

2006-04-24  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h (DEFINE_TEST_DISPATCH): New helper macro
	to define the same boilerplate "test dispatch" function
	in each test.
	* 21.string.append.cpp (DEFINE_TEST_DISPATCH): Used and
	simplified.
	Renamed the cs function argument to tcase (for test case)
	for clarity.
	(<memory>): Removed the inclusion of an unneeded header.
	* 21.string.assign.cpp: Same.
	* 21.string.insert.cpp: Same.
	* 21.string.replace.cpp: Same.

2006-04-24  Anton Pevtsov <antonp@moscow.vdiweb.com>

	* 21.strings.cpp (setvars): Added formatting of calls to overloads
	of insert.

2006-04-24  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (setvars): Corrected an off-by-one error indexing
	into an array of signatures.

2006-04-23  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h (UnknownChar, UnknownTraits, UnknownAllocator): Added.
	(sig_void): Defined to 1 instead of 0 to distinguish an "unknown"
	value from a known one.
	(MemberId): New member indentifying a set of overloads of a given
	member function of basic_string.
	(SignatureId): Renamed from MemberFunction and defined partly in
	terms of MemberId constants.
	(Function): New struct uniquely identifying a specific overload of
	a given member function of a particular specialization of basic_string.
	(setvars): Renamed from format, changed signature and semantics and
	made private.
	(run_test): New function to run all test cases defined by a test.
	* 21.strings.cpp (setvars): Defined the environment variables CLASS,
	FUNC, FUNCSIG, and FUNCALL to the name of the specialization of the
	class template, the name of the member function, and the name of the
	overload of the member function, respectively, and optionally, the
	call to the member function with argument expanded.
	(run_test): Runs all test cases specified by each test.
	* 21.string.append.cpp: Simplified by using the above.
	(MemFun): Defined to StringMembers::Function.
	(tests): Made static local and removed function signatures obviated
	by the above changes.
	* 21.string.assign.cpp: Same.
	* 21.string.replace.cpp: Same.

2006-04-21  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h (append_last, assign_last, insert_last, replace_last):
	Made constants one greater than the last valid index for each member
	function.
	(append_overloads, assign_overloads, insert_overloads,
	replace_overloads, member_functions): Removed from the definition
	of the MemberFunction enumeration and moved them into an enum of
	their own.
	(append, assign, insert, replace): Removed.
	* 21.strings.cpp (format): Adjusted for the above, simplified the
	formatting of basic_string template arguments by leaving out the
	name of the default allocator for brevity. Implemented the formatting
	for replace.

2006-04-21  Anton Pevtsov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>
	
	* 21.string.replace.cpp (<21.strings.h>, StringMembers): Included
	header and used class to simplify.
	(ReplaceTags, TestCase, rw_opt_no_replace_*): Removed, replaced with
	StringMembers equivalents.
	(test_exceptions, test_replace_range, test_replace): Made locals const
	wherever appropriate.

2006-04-20  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.h (TestCase): Added new members.
	(Test): Removed the member which (moved to TestCase).
	(format): Removed last argument.
	(opt_no_user_char, opt_no_char_traits, opt_no_user_traits,
	opt_no_exceptions, opt_no_exception_safety): New static members.
	* 21.strings.cpp: Same as above as necessary.
	* 21.string.append.cpp: Reflected the above.
	* 21.string.assign.cpp: Ditto.

2006-04-20  Martin Sebor  <sebor@roguewave.com>

	* 21.string.append.cpp (test_append): Replaced get_append_format()
	with a direct call to StringMembers::format.
	* 21.string.assign.cpp (test_assign): Same for get_assign_format().

2006-04-20  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.cpp (_RWSTD_TEST_SRC): Defined.

2006-04-19  Martin Sebor  <sebor@roguewave.com>

	* 21.strings.assign.cpp (<21.strings.h>, StringMembers): Included
	header and used class to simplify.
	(AssignOverload, TestCase, FunctionTag, rw_opt_no_assign): Removed,
	replaced with StringMembers equivalents.
	(*_test_cases): Renamed from assign_*_test_cases for simplicity,
	reverting a previous rename in the opposite direction.
	* 21.strings.append.cpp: Same.

2006-04-19  Martin Sebor  <sebor@roguewave.com>

	* 21_strings.h: New header containing definitions of helpers
	used in clause 21 tests.
	* 21_strings.cpp: New implementation file of the same.

2006-04-19  Martin Sebor  <sebor@roguewave.com>

	* 21.string.assign.cpp (AssignOverload): Renamed from AssignTags.
	(TestCase): Renamed members to correspond to AssignOverload enums
	and to better indicate the purpose of each.
	(rw_opt_no_assign_*): Collapsed individual varaibles into an array
	indexed with AssignOverload enums.
	(*_test_cases): Renamed to assign_*_test_cases for consistency and
	to make it easy to refer to each array using just AssignOverload
	enums.
	(FunctionTag): Removed p_opt member (obviated by the addition
	of the rw_opt_no_assign array) and renamed other members for
	consistency with local variables used to refer to the same things
	elsewhere in the test.
	(TEST): Simplified the definition of the macro by relying on the
	changes above.
	(test_assign_exceptions, test_assign_range, test_assign): Introduced
	local helper variables, consitified others, and simplified.
	(get_assign_format): Removed first two arguments and changed to
	return pointer to the formatted string.
	(test_assign): Qualified a call to free() with std:: and simplified.
	(test_assign): Naming changes.
	(main): Used rw_opt_no_assign array.

2006-04-19  Martin Sebor  <sebor@roguewave.com>

	* fmt_defs.h (<testdefs.h>): Included.
	(i64_t): Defined to int when _RWSTD_INT32_T is not #defined.

2006-04-18  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 20.auto.ptr.cpp: New test exercising lib.auto.ptr.

2006-04-18  Martin Sebor  <sebor@roguewave.com>

	* testdefs.h (_PTR_THROWS): New helper macro.

2006-04-14  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.assign.cpp: New test exercising lib.string.assign.

2006-04-12  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.append.cpp: New test exercising lib.string.append.

2006-04-10  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.replace.cpp (ReplaceTags): Enum members renamed
	according to naming convention.
	(TestCase): num2, it_res, it_res_len fileds removed as obsolete,
	cnt field rename to count.
	(test_cases): array split to off_size_test_cases, 
	off_size_str_test_cases, etc to exercise each replace 
	overload separately.
	(FunctionTag): New strcture containing information about test
	options and test cases for each replace overload.
	(function_tags): New array of function tags.
	(rw_opt_no_replace_off_size_ptr, rw_opt_no_replace_off_size_str, ...): 
	Command line options renamed according naming convention.
	(test_replace_exceptions): New function to exrcise exception safety.
	(test_replace_range): New functions to exercise 
	replace range version.
	(test_replace): Modified to exercise replace versions independently,
	included exception safety tests, added exc_safety_test parameter 
	to indicate the test case type.
	(get_replace_format): New function to prepare test output 
	formatted string.
	(run_test): Modified to iterate through function_tags array.
	(main): Changed to operate with renamed command line options.

2006-04-10  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.insert.cpp (get_insert_format): Added missed 
	function name "insert".

2006-04-07  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.insert.cpp (rw_opt_no_exception_safety): New option to
	disable the exception safety tests.
	(off_test_cases, off_str_test_cases, ...): New test cases were 
	added include cases for exception safety tests.
	(test_insert_exceptions): New function to exrcise exception safety.
	(test_insert): Modified to include exception safety tests, added
	exc_safety_test parameter to indicate the test case type.
	(main): added support for new option  no-exception-safety.

2006-04-04  Martin Sebor  <sebor@qvdx018242>

	* fmt_bits.cpp (<ctype.h>): Added a missing #include directive.

2006-04-03  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.insert.cpp: New test exercising lib.string.insert.

2006-04-03  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 0.char.cpp (rw_widen): Exercised r391042
	(rw_narrow): The same.

2006-04-03  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* char.cpp (rw_widen): Added '\0' symbol to the end of string.

2006-03-30  Martin Sebor  <sebor@roguewave.com>

	* fmt_defs.h: New header.
	* printf.cpp (Buffer, FmtSpec): Moved definitions to fmt_defs.h.
	(_rw_fmterrno, _rw_fmtlc, _rw_fmtmask, _rw_fmtiostate, _rw_fmtflags,
	_rw_fmtopenmode, _rw_fmtseekdir, _rw_fmtevent, _rw_fmtmonpat,
	_rw_fmtsignal): Moved definitions to fmt_bits.cpp.
	(_rw_quotechar, _rw_fmtarray): Prepended underscore according
	to the naming convention.
	(_rw_fmtspec): Corrected the handling of $<expression> syntax.
	(_rw_fmtexpr): New function to format expressions involving
	environment variables.
	(_rw_vasnprintf_ext): Called _rw_fmtexpr(). Avoided aborting on
	malformed directives.
	* fmt_bits.cpp (_rw_fmterrno, _rw_fmtlc, ...): Moved definitions
	from printf.cpp.
	* test/printf.cpp (test_envvar): Exercised $<expressions>.
	(test_malformed_directives): Exercised malformed directives.
	(test_tm): Used a power of 2 (sizeof(int)) to create a bad
	(misaligned) address.

2006-03-30  Martin Sebor  <sebor@roguewave.com>

	* environ.cpp (rw_putenv): Removed the variable from the environment
	when it doesn't contain the equals sign.

2006-03-28  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.copy.cpp: New test exercising lib.string.copy.

2006-03-27  Martin Sebor  <sebor@roguewave.com>

	* char.cpp (_rw_fmtstringv): Used _RWSTD_VA_COPY() instead of direct
	assignment to va_list (which may have array type) .

2006-03-27  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.replace.cpp (test_replace): Strings format in
	rw_assert calls changed to generic strings, workaround 
	for UserChars strings output removed as obsolete.

2006-03-27  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.erase.cpp (EraseTags): New enum determining which
	erase version to test.
	(test_erase): Changed "which" parameter type to use new enum,
	changed strings output in rw_assert calls to use generic
	strings.
	(note_test_disabled): Changed "which" parameter type to
	EraseTags enum.
	(run_test): Updated to use new enum EraseTags instead of
	integer.

2006-03-27  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.capacity.cpp (MemFun): Add UChar member to charT
	enum.
	(test_resize): Updated to be able operate with UserChar's,
	strings output format in rw_assert calls changed to generic 
	strings.
	(test_capacity): The same.
	(rw_opt_no_user_chars): New cmd line option --no-user_chars.
	(run_test): UserChar's tests added.
	(main): New command line option added.

2006-03-25  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (UChar, UShrt, UInt, ULong, ULLong): Introduced and
	used global convenience typedefs.
	(WEOF): Defined if not defined in libc headers.
	(rw_quotechar, rw_fmtarray): Explicitly instantiated for compilers
	such as Compaq C++ that do not do so implicitly.

2006-03-25  Martin Sebor  <sebor@roguewave.com>

	* _defs.h (_RWSTD_VA_COPY): New helper macro.
	* VA_LIST.cpp(_RWSTD_NO_VA_COPY): New macro #defined in response
	to the C99 va_copy() macro not being #defined in <stdarg.h>.
	* exception.cpp (__rw_vfmtwhat): Unconditionally used _RWSTD_VA_COPY().
	* printf.cpp (rw_vasnprintf): Used _RWSTD_VA_COPY.
	(rw_sprintf, rw_snprintf): Provided definitions.

2006-03-22  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.replace.cpp (LPAR): Macro definition changed
	(long_parity_len): Removed as obsolete.
	(ReplaceTags): New enum containing the descriptive "which"
	arguments.
	(test_cases): Strings alignment changed.
	(test_replace): Changed to use ReplaceTags members, type of
	"which" variable changed to ReplaceTags.
	(note_test_disabled): The same.
	(run_test): The same.

2006-03-21  Martin Sebor  <sebor@roguewave.com>

	* char.cpp (test_rw_match): Cast character string macro argument
	to the correct type.

2006-03-21  Martin Sebor  <sebor@roguewave.com>

	* rw_char.h (UserCharFmatInit, _rw_user_char_fmat_init): Initializer
	type and object to install a "user-defined" formatting callback for
	arrays of generic characters including UserChar.
	* src/char.cpp (_rw_fmtstring, _rw_fmtstringv): "User-defined"
	formatting callback for arrays of generic characters including
	UserChar.
	* test/0.char.cpp (test_formatting): Exercised the above.

2006-03-21  Martin Sebor  <sebor@roguewave.com>

	* 21.string.capacity.cpp (LSTR, LLEN): New macros for convenience.
	(test_resize): Changed type of cparam argument to int and simplified.
	(test_capacity): Avoided returning the result of a call to a fuction
	returning void to prevent an HP aCC 3.63 error. Eliminated pstr local
	variable and used the same string object instead.
	(test_resize): Added test cases.

2006-03-21  Martin Sebor  <sebor@roguewave.com>

	* rw_char.h (rw_match): Declared and documented new helpers.
	* src/char.cpp (rw_match): Implemented new helpers.
	* test/char.cpp (test_rw_match): Exercised new helpers.

2006-03-20  Martin Sebor  <sebor@roguewave.com>

	* 21.string.replace.cpp (LSTR, LLEN, LPAR): New convenience macros.
	(TestCase::str, src, res, it_res): Added const-qualification to avoid
	gcc warnings.
	(test_replace): Added const-qualification wherever appropriate.

2006-03-20  Martin Sebor  <sebor@roguewave.com>

	* rw_char.h (rw_narrow): Declared new testsuite helper(s).
	* char.cpp (rw_narrow): Implemented new testsuite helper(s).
	* 0.char.cpp (test_narrow): Exercised new testsuite helper(s).

2006-03-20  Martin Sebor  <sebor@roguewave.com>

	* 0.char.cpp (test_widen): Exercised r387377.

2006-03-20  Martin Sebor  <sebor@roguewave.com>

	* char.cpp (rw_widen): Zeroed out the destination array when the
	source pointer is null and length is less than SIZE_MAX (i.e.,
	implemented the equivalent of memset(dst, 0, len * sizeof *dst)).
	* rw_char.h (rw_widen): Updated comments to reflect the above.

2006-03-20  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.replace.cpp (ReplaceData): Removed as obsolete
	(TestCase): New structure to store a test case
	(test_cases): Static array of the test cases
	(test_replace): Functions updated to use TestCase and test_cases[] 
	instead of ReplaceData.

2006-03-20  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.capacity.cpp (run_test): Fixed bug in options processing
	(main): Fixed bug with missed '#' sign in options.

2006-03-20  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.erase.cpp (main): Fixed bug with missed '#' sign.

2006-03-19  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 27.istream.unformatted.get.cpp: New test exercising the overloads
	of the get() member functions specified in lib.istream.unformatted.

2006-03-19  Martin Sebor  <sebor@roguewave.com>

	STDCXX-3
	* rw_streambuf.h: New header. Defines a test streambuf class template.

2006-03-19  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (bad_address, format_bad_address): Helpers to generate
	and format an invalid or misaligned address.
	(test_string, test_chararray, test_basic_string, test_tm): Used
	bad_address and format_bad_address to exercise the detection and
	formatting of invalid and misaligned addresses.
	(test_ios_bitmasks): Verified that the directive doesn't insert NULs.

2006-03-19  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (_rw_fmtbadaddr): Added a size argument to distinguish
	an invalid address from a misaligned one.
	(_rw_vasnprintf_c99, rw_vasnprintf, _rw_fmtpointer, _rw_fmtarray,
	_rw_vfprintf): Explicitly cast integer values to the target type
	to silence HP aCC's truncation and or sign-extension warnings.
	(_rw_fmttm, rw_fmtarray, _rw_fmtwstr, _rw_vasnprintf_ext): Detected
	and properly formatted both invalid and mislaigned addresses.
	(rw_bmpfmt): Avoided NUL-terminating buffer.

2006-03-18  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.num.get.cpp (<cstddef>): Removed an unnecessary #include
	directive.
	(PunctData): New base class of the Punct<charT> template to reduce
	code bloat.
	(Punct): Derived from PunctData and simplified.
	(Streambuf): New class template.
	(Ios, NumGet): Added a template parameter.
	(do_test): Exercised std::num_get specializations on istreambuf_iterator
	and user-defined InputIterator type in addition to character pointer.
	(do_test): New helper to dispatch to the appropriate specialization of
	the main do_test function.
	(test_errno, test_bool, test_shrt, ...): Removed the charT template
	parameter to reduce code bloat.
	(test_llong, test_ullong): Guarded with _RWSTD_NO_LONG_LONG.
	(run_tests): New dispatch function on iterator type.

2006-03-18  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.num.get.cpp [_MSC_VER] (ULL): Corrected typo in macro name.
	(test_llong) Moved sign out of the macro argument to prevent undefined
	behavior due to the concatenation of more than two tokens during
	preprocessing.

2006-03-18  Martin Sebor  <sebor@roguewave.com>

	* 22.time.put.cpp: Renamed...
	* 22.locale.time.put.cpp: ...to this for consistency.

2006-03-18  Martin Sebor  <sebor@roguewave.com>

	* 22.time.put.cpp (<rw_locale.h>): Included instead of <localedef.h>.

2006-03-18  Martin Sebor  <sebor@roguewave.com>

	* localedef.h: Renamed...
	* rw_locale.h: ...to this to prevent clashing with the HP-UX
	system header with the same name.
	* localedef.cpp: Renamed...
	* locale.cpp: ...to this to (pretty closely) match header name.

2006-03-17  Martin Sebor  <sebor@roguewave.com>

	* 25.equal.range.cpp (Y ctor): Changed argument to char.
	(test_equal_range): Removed a cast to prevent gcc 3.2 from
	confusing an object definition with that of a function.

2006-03-17  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.replace.cpp: Svn properties were set.

2006-03-17  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 21.string.replace.cpp: New test exercising lib.string.replace.

2006-03-16  Martin Sebor  <sebor@roguewave.com>

	* 25.adjacent.find.cpp (test_adjacent_find): Corrected paramno values
	to account for the change in the handling of conditionals in r371638.

2006-03-15  Martin Sebor  <sebor@roguewave.com>

	* driver.cpp (RLIM_SAVED_CUR, RLIM_SAVED_MAX): Defined to RLIM_INFINITY
	when not #defined.
	(rw_vtest): Explicitly cast an int to long to silence HP aCC's integer
	widening warning 887.

2006-03-15  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 21.string.erase.cpp (rw_opt_no_exceptions, rw_opt_no_erase, 
	rw_opt_no_erase_pos, rw_opt_no_erase_count,
	rw_opt_no_erase_iterator, 
	rw_opt_no_erase_range): New command line options.
	(test_erase): Added check for the --no-exceptions option.
	(note_test_disabled): New function to display the disable note.
	(run_test): Changed to support new command line options.
	(main): Added new command line options.

2006-03-14  Martin Sebor  <sebor@roguewave.com>

	* driver.cpp (<ctype.h>): Included for islower() and isupper().
	(<sys/resource.h>): Conditionally included for setrlimit().
	(_rw_check_init): Enhanced diagnostics.
	(_rw_setopt_output_file): Correctly handled spaces between the short
	option and its argument (i.e., allowd -o <filename> in addition to
	-o<filename>).
	(_rw_setopt_ulimit): New function to set one or more resource (soft
	and/or hard) limits.
	(_rw_setopt_compat_error, _rw_setopt_compat_warn): New helpers to
	print out diagnostics for compatibility-mode options used when not
	in that mode.
	(_rw_setopt_compat_append): -A compatibility option handler.
	(_rw_setopt_compat_compiler): -C compatibility option handler.
	(_rw_setopt_compat_dir): -D compatibility option handler.
	(rw_setopt_compat_debug_file): -G compatibility option handler.
	(_rw_setopt_compat_alarm): -L compatibility option handler.
	(_rw_setopt_compat_machine): -M compatibility option handler.
	(_rw_setopt_compat_output_file): -O compatibility option handler.
	(_rw_setopts_compat): New function to install compatibility option
	handlers.
	(rw_vtest): Installed --ulimit handler and called _rw_setopts_compat.

2006-03-14  Martin Sebor  <sebor@roguewave.com>

	* 25.find.cpp (test_find): Avoided binding a reference to an unnamed
	temporary to prevent a code generation issue with Intel C++ 9.0.
	Simplified by removing unnecessary template argument(s).

2006-03-11  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 21.string.erase.cpp: New test exercising lib.string.erase.

2006-03-11  Martin Sebor  <sebor@roguewave.com>

	* rw_char.h (rw_widen): Documented behavior.

2006-03-11  Martin Sebor  <sebor@roguewave.com>

	* char.cpp (copy, move, rw_widen): Corrected logic errors.

2006-03-11  Martin Sebor  <sebor@roguewave.com>

	* 0.char.cpp: New test exercising the UserTraits class template
	and the rw_widen() set of overloaded helper functions.

2006-03-09  Martin Sebor  <sebor@roguewave.com>

	* 21.string.capacity.cpp (test_capacity): Changed Traits argument from
	by-value to a pointer to avoid making assumptions about Traits object
	being constructible.

2006-03-09  Martin Sebor  <sebor@roguewave.com>

	* rw_char.h (UserTraits<UserChar>): Declared ctor, dtor and assignment
	private to detect unwarranted assumptions.
	(MemFun, n_calls_): New member class and array of counters to keep
	track of member function calls.
	(assign, eq, lt, not_eof, to_char_type, to_int_type, eq_int_type,
	eof): Outlined UserTraits members.
	* char.cpp (assign, eq, lt, not_eof, to_char_type, to_int_type,
	eq_int_type, eof): Defined out of line.
	(copy, move): Corrected logic errors.

2006-03-09  Martin Sebor  <sebor@roguewave.com>

	* rw_char.h (UserTraits<UserChar>): Moved _TEST_EXPORT where MSVC
	wants to see it.
	* char.cpp (assign): Added a missing definition.

2006-03-07  Martin Sebor  <sebor@roguewave.com>

	* 21.string.capacity.cpp  (CharTraits, widen): Replaced with UserTraits
	and rw_widen() from <rw_char.h>.
	(test_resize): Renamed locals.
	(test_string_capacity): Renamed...
	(test_capacity): ...to this.
	(rw_opt_no_exceptions): New option to disable exceptions.
	(test_resize): Handled rw_opt_no_exceptions.
	(main): Same.

2006-03-07  Martin Sebor  <sebor@roguewave.com>

	* rw_char.h (compare, length, find, copy, move, assign): Outlined
	UserTraits<UserChar> members.
	(rw_widen): New functions for the wideining of narrow characters
	to the three character types used in the test suite (char, wchar_t,
	and UserChar).
	* char.cpp (compare, length, find, copy, move, assign, rw_widen):
	Defined.

2006-03-07  Martin Sebor  <sebor@roguewave.com>

	* 21.string.capacity.cpp (test_resize): Printed the (narrow)
	string before modifying it (as opposed to after) in diagnostics.

2006-03-07  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (_rw_vasnprintf_ext): Handled width in %{s} and %{ls}.
	* snprintfa.cpp (test_string): Exercised the above.

2006-03-07  Anton Pevstov  <antonp@moscow.vdiweb.com>

	* 21.string.capacity.cpp: Handled embedded NUL characters correctly.
	Added test cases and comments.

2006-03-04  Martin Sebor  <sebor@roguewave.com>

	STDCXX-3
	* rw_char.h: New header with definitions of a user-defined character
	type, a user-defined traits type, and a user-defined int_type.

2006-03-04  Anton Pevstov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	* 21_capacity.cpp: New test exercising lib.vector.capacity.

2006-03-03  Liviu Nicoara <nicoare@roguewave.com
	    Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 23.vector.modifiers.cpp: New test exercising lib.vector.modifiers.

2006-03-03  Liviu Nicoara  <nicoara@roguewave.com>
	    Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 23.vector.capacity.cpp: New test exercising lib.vector.capacity.

2006-03-01  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 21.string.access.cpp: New test exercising lib.string.access.

2006-02-28  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp (test_bufsize): Exercised %{N}, the fixed-width
	buffer extension (implemented in r381880).
	(_RWSTD_NO_SPRINTFA_FUNNAME): Corrected spelling.

2006-02-28  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (Buffer): New class for dynamic buffer management, to
	replace the char**, size_t arguments and allow to specify the max
	buffer size (to avoid reallocation of statically allocated buffers
	in the spirit of snprintf).
	(_rw_bufcat): Prevented exceeding the maximum size of the buffer.
	(rw_vasnprintf, rw_fmtarray, _rw_fmtstr, _rw_fmtwstr, _rw_fmtflags):
	Removed gratuitous insertion of the terminating NUL.
	(_rw_vasnprintf_ext): Advanced the end offset after calling a user
	defined formatting function.

2006-02-28  Martin Sebor  <sebor@roguewave.com>

	* 27.stringbuf.virtuals.cpp: Enhanced to exercise xsputn, including
	STDCXX-142.

2006-02-27  Martin Sebor  <sebor@roguewave.com>

	* 25.unique.cpp (run_test): Used BinaryPredicate::op_equals.
	(test_unique): Removed case sensitive tests.
	(test_unique): Used X::mismatch() instead of comparing the resulting
	sequence manually one element at a time, and used %{X=*.@} instead
	of %{X=*.*} for simplicity.

2006-02-27  Martin Sebor  <sebor@roguewave.com>

	* alg_test.h (mismatch): New helper function.
	(BinaryPredicate): Modified ctor to take an argument describing
	the operation performed by the member operator(), removed copy
	ctor and assignment operator.
	(X::Less): New class.
	* alg_test.cpp (mismatch): Defined.
	(compare): Implemented in terms of mismatch.
	(BinaryPredicate): Removed copy ctor and assignment operator.
	(_rw_fmtxarrayv): Recognized '@' in addition to '*' as a way
	to specify the position of the cursor (as the pointer rather
	than the index of the element designated by the cursor).

2006-02-27  Martin Sebor  <sebor@roguewave.com>

	* 26.adjacent.diff.cpp: Replaced class Y with class X and enhanced
	diagnostic output to take advantage of the %{X=+*} directive to
	format sequences of objects of type X as strictly numeric arrays.
	* 26.inner.product.cpp: Same.
	* 26.partial.sum.cpp: Same.

2006-02-27  Martin Sebor  <sebor@roguewave.com>

	* alg_test.h: Added support for arithmetic self-assignment operators
	to allow class X to be used in tests for numeric algorithms.
	* alg_test.cpp: Definitions of the above.
	(_rw_fmtxarrayv): Recognized and handled the '+' flag to force only
	numeric formatting.

2006-02-27  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 26.partial.sum.cpp: New test exercising lib.partial.sum.

2006-02-27  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 26.inner.product.cpp: New test exercising lib.inner.product.

2006-02-27  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 26.adjacent.diff.cpp: New test exercising lib.adjacent.diff.

2006-02-21  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (rw_vasnprintf): Increased the size of the backtrack
	array, increased the size of the cvtspec buffer after a successful
	allocation, and asserted preconditions.

2006-02-21  Anton Pevtsov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	* 26.accumulate.cpp: New test exercising lib.accumulate.

2006-02-20  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 25.libc.cpp: New test exercising lib.alg.c.library.

2006-02-20  Martin Sebor  <sebor@roguewave.com>

	* 27.stringbuf.virtuals.cpp: Reduced the use of templates for better
	compilation efficiency and less code bloat.

2006-02-20  Liviu Nicoara  <nicoara@roguewave.com>

	* 23.vector.cons.cpp: New test exercising lib.vector.cons.

2006-02-20  Martin Sebor  <sebor@roguewave.com>

	STDCXX-151
	* 18.limits.cvqual.cpp: New test exercising the proposed resolution
	of LWG issue 559.

2006-02-19  Martin Sebor  <sebor@roguewave.com>

	* 27.stringbuf.virtuals.cpp: New test for lib.stringbuf.virtuals,
	including STDCXX-149.

2006-02-18  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (A_ARRAY): New bit.
	(rw_fmtarray, _rw_fmtwstr): Changed character array formatting
	so as to prepend the 'L' prefix only to generic character arrays
	parametrized on the width of the character type.
	(_rw_fmtarray): Set the A_ARRAY bit.
	(_rw_fmtwchr): Formatted -1 as EOF (no quotes).
	* 0.printf.cpp: Exercised the above changes, specifically that
	the 'L' prefix is only prepended to quoted generic characters
	and arrays of such things parametrized on the width of the
	character type.

2006-02-17  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp: Exercised %{S}, %{lS}, %{#*S}, %{Io}, and %{Iw},
	(std::string, std::wstring, std::basic_string for generic charT,
	std::ios::openmode, and std::ios::seekdir). See r378675.
	Guarded a test for %{8Ao} for platforms without 64-bit integers.

2006-02-17  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (_rw_fmtseekdir): New function for the formatting
	of ios::seekdir values.
	(_rw_fmtwstr): Implemented consistently with _rw_fmtstr.
	(rw_bmpfmt): Handled the pound flag in the formatting of named
	constants: expanded the scope in such names (i.e., to all of
	"std::ios::in" as opposed to just "in").
	(_rw_vasnprintf_ext): Implemented the handling of %{#*S} analogous
	to %{*Ac}, i.e., for the formatting of generic specializations of
	basic_string. Implemented the handling of the %{Iw} directive for
	the formatting of ios::seekdir values.

2006-02-17  Martin Sebor  <sebor@roguewave.com>

	STDCXX-147
	* 18.limits.traps.cpp: Enhanced and worked around:
	http://sources.redhat.com/bugzilla/show_bug.cgi?id=2351

2006-02-17  Martin Sebor  <sebor@roguewave.com>

	* 25.set.difference.cpp (<cstddef>): Replaced calls to strlen() on
	string literals with the use of the sizeof operator for better
	efficiency and eliminated the dependency on <cstring> (replacing
	it with one on <cstddef> instead).
	* 25.set.intersection.cpp: Same.
	* 25.set.union.cpp: Same.

2006-02-17  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 25.set.sym.difference.cpp: New test for lib.set.symmetric.difference.

2006-02-17  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 25.set.difference.cpp: New test exercising lib.set.difference.

2006-02-17  Martin Sebor  <sebor@roguewave.com>

	* alg_test.h (first_less): New helper function declaration.
	(from_char): Added a third argument to check that the source array
	is sorted in non-descending order.
	(ilog2, ilog10): Outlined for better compilation efficiency.
	(is_sorted): New helper function template.
	* alg_test.cpp (first_less): Defined.
	(from_char): Verified that the source array is sorted and returned
	0 when it's not.

2006-02-17  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 25.set.intersection.cpp: New test exercising lib.set.intersection.

2006-02-16  Martin Sebor  <sebor@roguewave.com>

	* 25.merge.cpp (MergeBase, Merge, InplaceMerge): Abbreviated
	by dropping the word "Test" from the original names.

2006-02-16  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 25.set.union.cpp: Brand spankin' new test exercising lib.set.union.

2006-02-14  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 25.permutation.cpp: New test for lib.alg.permutation.generators.

2006-02-14  Martin Sebor  <sebor@roguewave.com>

	* 25.merge.cpp: Limited the use of templates to a bare minimum
	to reduce compilation times and prevent unnecessary code bloat.
	With gcc 4.0.2 on Solaris the test compiles more than twice as
	fast (in both user and system time) yielding an object file
	less than 1/2 the size of the original and a 20% smaller
	executable.

2006-02-13  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 25.lex.comparison.cpp: New test exercising lib.lex.comparison.

2006-02-13  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 25.min.max.cpp: New test exercising lib.alg.min.max.

2006-02-13  Liviu Nicoara  <nicoara@roguewave.com>

	* tests/src/new.cpp: removed trailing newlines

2006-02-09  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 27.objects.cpp: New test exercising lib.iostream.objects.

2006-02-09  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 27.forward.cpp: New test exercising lib.iostream.forward.

2006-02-09  Anton Pevtsov  <antonp@moscow.vdiweb.com>
            Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 25.heap.cpp: New test exercising lib.alg.heap.operations.

2006-02-09  Martin Sebor  <sebor@roguewave.com>

	* 25.includes.cpp: Corercted a logic error preventing the predicate
	form of the algorithm from being exercised.

2006-02-08  Martin Sebor  <sebor@roguewave.com>

	* 2.smartptr.shared.cpp (<cassert>): Removed.

2006-02-08  Martin Sebor  <sebor@roguewave.com>

	* new.cpp (operator_new): Corrected the formatting directive for size_t.

2006-02-08  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 25.includes.cpp: New test exercising lib.includes.

2006-02-07  Anton Pevtsov <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 25.sort.cpp: New test exercising lib.sort and lib.stable.sort.
	* 25.partial.sort.cpp: New test exercising lib.partial.sort and
	lib.partial.sort.copy.

2006-02-07  Liviu Nicoara  <nicoara@roguewave.com>

	STDCXX-4
	* 23.deque.iterators.cpp: New test exercising lib.deque.iterators.

2006-02-06  Anton Pevtsov <antonp@moscow.vdiweb.com>

	* 25.partitions.cpp (test_partitions): Enhanced to keep track of leaked
	objects.

2006-02-06  Martin Sebor  <sebor@roguewave.com>

	* 25.merge.cpp (Less): Corrected a typo.

2006-02-06  Anton Pevtsov <antonp@moscow.vdiweb.com>

	* 25.merge.cpp: New test exercising lib.alg.merge.

2006-02-06  Martin Sebor  <sebor@roguewave.com>

	* 25.unique.cpp: Added/removed/corrected comments.

2006-02-06  Martin Sebor  <sebor@roguewave.com>

	* include/printf.h: Renamed...
	* include/rw_printf.h: ...to this.
	* src/alg_test.cpp (<rw_printf.h>): Included instead of <printf.h>.
	* containers/23.deque.modifiers.cpp: Same.
	* src/any.cpp: Same.
	* strings/21.cwchar.cpp: Same.
	* self/0.printf.cpp: Same.
	* src/printf.cpp: Same.
	(_rw_fmtlong, _rw_fmtllong): Used _RWSTD_INTERNAL to conditionally
	declared the helper functions to have internal linkage in order to
	work around a Sun C++ bug.
	* src/system.cpp (<rw_printf.h>): Included instead of <printf.h>.
	(_rw_vsystem): Avoided declaring const a variable used as an argument
	to the WIFXXX() macros in order to prevent bogus gcc warning on Linux:
	cast from `const int*' to `int*' discards qualifiers from pointer
	target type: see http://sourceware.org/bugzilla/show_bug.cgi?id=1392
	* src/driver.cpp (<rw_printf.h>): Included instead of <printf.h>.
	Used rw_fprintf(rw_stderr) instead of fprintf to make sure all output
	is flushed even when the program abends.

2006-02-06  Martin Sebor  <sebor@roguewave.com>

	STDCXX-3
	* alarm.h: New. Declaration of the rw_alarm() helper.
	* alarm.cpp: New. Definition of the same.

2006-02-05  Anton Pevtsov <antonp@moscow.vdiweb.com>

	* 25.binary.search.cpp: New test exercising lib.binary.search.

2006-02-05  Anton Pevtsov <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	* 25.equal.range.cpp: New test exercising lib.equal.range.

2006-02-04  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 25.nth.element.cpp (test_nth_element): Updated the upper bound value
	to a more strict one.

2006-02-04  Martin Sebor  <sebor@roguewave.com>

	* 25.lower.bound.cpp (test_lower_bound): Corrected the nparam argument
	in the formatting string to account for a change in rw_snprintfa()
	behavior introduced in r371638.
	* 25.upper.bound.cpp (test_upper_bound): Same.

2006-02-04  Anton Pevtsov <antonp@moscow.vdiweb.com>

	* 25.lower.bound.cpp (test_lower_bound): Fixed assertion condition to
	verify the complexity, updated the expected complexity values to meet
	the standard requirements.
	* 25.upper.bound.cpp (test_upper_bound): Same.

2006-02-02  Martin Sebor  <sebor@roguewave.com>

	* alg_test.cpp (<printf.h>): Corercted the spelling of header name.

2006-02-02  Martin Sebor  <sebor@roguewave.com>

	* any.h: Added declarations for const and volatile overloads
	of ctors taking a pointer argument.
	* any.cpp: Added definitions of the same.

2006-02-02  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 21.cwchar.cpp: New test exercising lib.string.c.strings, header
	<cwchar>, including STDCXX-129.

2006-02-01  Anton Pevtsov <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 25.partitions.cpp: New test exercising lib.alg.partitions.
	Test currently fails due to STDCXX-131.

2006-01-31  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 25.nth.element.cpp: New test exercising lib.alg.nth.element.

2006-01-30  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 25.unique.cpp: Enabled predicate tests inadvertently disabled
	in a previous commit.

2006-01-30  Martin Sebor  <sebor@roguewave.com>

	STDCXX-34
	* cstdint: Simplified.
	* 8.cstdint.cpp: New test exercising tr.c99.cstdint.

2006-01-26  Martin Sebor  <sebor@roguewave.com>

	* alg_test.h (UnaryPredicate, BinaryPredicate): Changed the return
	type of operator() from bool to conv_to_bool for extra strictness.
	Removed dead declarations of tempstr and to_string().
	* alg_test.cpp (UnaryPredicate, BinaryPredicate): Same.

2006-01-26  Anton Pevtsov  <antonp@moscow.vdiweb.com>
            Martin Sebor  <sebor@roguewave.com>

        STDCXX-4

	* 25.unique.cpp: New test to exercise lib.alg.unique.

2006-01-26  Liviu Nicoara  <nicoara@roguewave.com>
	    Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 23.deque.modifiers.cpp: New test exercising lib.deque.modifiers.
	* 23.deque.special.cpp: New test exercising lib.deque.special.

2006-01-26  Anton Pevtsov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	* 25.transform.cpp: New test exercising lib.alg.transform.

2006-01-25  Martin Sebor  <sebor@roguewave.com>

	* 25.random.shuffle.cpp: Corrected subtle logic errors and simplified.

2006-01-25  Anton Pevtsov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 25.random.shuffle.cpp: New test exercising lib.alg.random.shuffle
	including STDCXX-126.

2006-01-25  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (_rw_fmtchr, _rw_fmwtchr): Added a noesc argument
	for callers to control whether to escape non-printable characters
	independently of quoting.
	(_rw_vasnprintf_c99, _rw_vasnprintf_ext): Disabled and enabled,
	respectively, the use of escape sequences when formatting narrow
	and wide characters using the %c, %{c}, %lc, and %{lc} directives.
	* 0.printf.cpp: Exercised the above.

2006-01-24  Martin Sebor  <sebor@roguewave.com>

	* 25.replace.cpp (<cstdarg>, <cstdlib>, <printf.h>): Removed needless
	#include directives.
	(ToString): Removed.
	(test_remove): Made sure the xsrc pointer is always dereferenceable
	by allocating one more element than necessary under all circumstances.
	Replaced %p formatting with the more descriptive offset from the
	beginning of the sequence.
	Removed the uses of the ToString template and used the %{X=...}
	directive to directly format arrays of objects of type X.
	Used the %#c extension to format characters to avoid producing
	non-printable output (and format such characters using traditional
	C escape sequences).
	* 25.reverse.cpp: Same.
	* 25.remove.cpp: Same.
	* 25.rotate.cpp: Same.

2006-01-24  Martin Sebor  <sebor@roguewave.com>

	* alg_test.cpp (_rw_fmtxarray): New callback function implementing
	the formatting of arrays of object of type X, invoked in response
	to extended formatting directives from rw_printf() at al.
	(X::X): Pushed _rw_fmtxarray on top of the stack of user-defined
	formatting callbacks.
	(RW_ASSERT): Used instead of redefining the assert macro to do so.

2006-01-24  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (_rw_vfprintf): Allowed rw_file* argument to be null
	to permit executing special directives that generate no characters,
	and avoided attempting to produce output.

2006-01-24  Liviu Nicoara <nicoara@roguewave.com>
	    Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 0.new.cpp: New test exercising the testsuite's replacement operators
	new and delete.

2006-01-24  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp (<float.h>, <limits.h>, <wchar.h>, <ios>, <iostream>,
        <locale>, <string>): Removed unnecessary #include directives.
	(test_user_defined_formatting): New function exercising directives
	involving user-defined callback functions introduced in rev 372001.
	(main): Called it.

2006-01-24  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (_rw_vasnprintf_cxx): Renamed to...
	(_rw_vasnprintf_ext): ...this.
	(_rw_usr_cb_t, _rw_usr_fun, _rw_usr_inx): New type of a user-defined
	formatting callback function, an array of pointers to such things,
	and their number.
	(rw_vasnprintf): Added the handling for the special %{+} directive
	to append to the end of (rather than overwrite) the destination buffer.
	Stored all arguments extracted from the variable argument list rather
	than just their C99 subset.
	(_rw_vasnprintf_ext): Allowed each of the user-defined formatting
	callback functions on the stack to process a formatting directive
	before handling it here.
	Implemented the special %{!}, %{+!}, and %{-!} directives to set,
	push on top of the stack, and pop off the top of the stack, a user
	defined formatting callback function.
	Replaced an assertion for an unknown directive with a more descriptive
	and recoverable formatting error.

2006-01-23  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp (test_conditional): Exercised the ability to use the
	value of conditional expression in subsequent paramno specifiers.

2006-01-23  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (FmtSpec): Changed modifiers from a bitfield to an emum
	as at most one modifier may be specified. Introduced convenience member
	types and renamed members of the param union for consistency with the
	corresponding types.
	(libstd_vasnprintf): Renamed...
	(_rw_vasnprintf_cxx): ...to this for consistency.
	(_rw_fmtspec, _rw_vasnprintf_c99, _rw_fmtinteger, _rw_fmtfloating,
	_rw_fmtfunptr, _rw_fmtmask, rw_fmtarray, _rw_vasnprintf_cxx): Naming
	changes.
	(rw_vasnprintf): Stored the value of conditional expressions extracted
	from the argument list (to allow it to be referenced in subsequent
	paramno specifiers).
	(PARAM): Simplified (made possible by naming changes above).
	(_rw_fmtlong): Allowed for the possibility of the formatting producing
	no output (when both the value the precision are 0).

2006-01-19  Martin Sebor  <sebor@roguewave.com>

	STDCXX-3
	* rw_new.h: New header with definitions of replacement operator new.
	* new.cpp: Implementation of replacement operator new with error and
	memory corruption detection.

2006-01-19  Liviu Nicoara <nicoara@roguewave.com>
	    Martin Sebor <sebor@roguewave.com>

	STDCXX-4
	* 21.string.cons.cpp: New test exercising lib.string.cons.

2006-01-18  Anton Pevtsov <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 25.swap.cpp: New test exercising lib.alg.swap.

2006-01-17  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 25.search.cpp: New test exercising lib.alg.search, including
	STDCXX-121.

2006-01-17  Martin Sebor  <sebor@roguewave.com>
	
	* 21.cwctype.cpp (iswalnum, etc.): Undefined macros.
	(bit_xxx): Added more bits for missing functions and removed 
	the corresponding isxxx_declared variables.
	(iswalnum<T>, etc): Set bit to indicate a function is missing (not
	declared) in <cwctype>. Returned -1 intead of 0 to distinguish the
	return value from the real functions.
	(wctrans<T>): Added a definition.   
	(run_test): Used bit_xxx instead of isxxx_declared. 

2006-01-17  Martin Sebor  <sebor@roguewave.com>

	* src/printf.cpp (<ctype.h>): Included for isalpha, et al.
	(<wchar.h>, <wctype.h>): Guarded header include directives.
	(_rw_fmtmask): New (yet unused) function for the formatting
	of character classification bits/masks.
	(_rw_fmtlong, _rw_fmtllong): Avoided unnecessarily NUL-terminating
	buffer (done later in _rw_fmtstr).     
	(rw_fmtinteger): New template function for the generic formatting
	of arbitrary integral types.
	(_rw_fmtinteger): Simplified by calling rw_fmtinteger.  
	(_rw_fmtbadaddr): Handled the formatting of null pointers.
	(_rw_fmttm): Simplified the formatting of invalid pointers.
	(rw_quotestr): Renamed to...
	(rw_fmtarray): ...this and implemented the formatting of arrays 
	of arbitrary integral types (in addition to characters).
	(_rw_fmtarray): New function for the formatting of arrays 
	of arbitrary integral types.
	(_rw_fmtwstr): Called rw_fmtarray instead of rw_quotestr.
	(libstd_vasnprintf): Called the higher-level _rw_fmtstr instead
	of the rw_quotestr helper. Factored out the handling of character
	arrays into _rw_fmtarray. Implemented the handling of %{Ad}, %{Ai},
	%{Ao}, %{Au}, and %{Ax} (arrays of integral values).
	* self/0.printf.cpp (test_array): Renamed to...
	(test_chararray): ...this function.
	(test_intarray): New function exercising the formatting of arrays
	of integral values.
	(main): Called test_chararray and test_intarray.

2006-01-16  Martin Sebor  <sebor@roguewave.com>

	* 21.cwctype.cpp: Detected and gracefully handled (i.e., without
	compilation errors) the absence of any exercised type or function.

2006-01-16  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 20.operators.cpp: New test exercising lib.operators, including
	STDCXX-120.

2006-01-15  Martin Sebor  <sebor@roguewave.com>

	* cwctype.cpp (test_types): New function testing the presence
	of wint_t, wctrans_t, and wctype_t in namespace std.

2006-01-15  Martin Sebor  <sebor@roguewave.com>

	* testdefs.h (std) [_RWSTD_NO_NAMESPACE]: #defined to be empty to
	allow std:: qualifications even when namespace support is disabled.

2006-01-14  Martin Sebor  <sebor@roguewave.com>

	* 21.cctype.cpp: New test exercising lib.c.strings, the contents
	of the header <cctype>.
	* 21.cwctype.cpp: New test exercising lib.c.strings, the contents
	of the header <cwctype>.

2006-01-14  Martin Sebor  <sebor@roguewave.com>

	* 25.rotate.cpp (<printf.h>): Corrected a typo.

2006-01-12  Martin Sebor  <sebor@roguewave.com>

	* 22.time.put.cpp (<cwchar>): Included for wcslen etc.
	(do_test): Used %{Ac} to correctly format "generic" character
	arrays in diagnostic output.
	(test_POSIX): Exercised facet behavior with the TZ environment
	variable not set.

2006-01-12  Martin Sebor  <sebor@roguewave.com>

	* printf.h (%Ac, %K): Documented.

2006-01-12  Anton Pevtsov  <antonp@moscow.vdiweb.com>

        STDCXX-4
        * 25.rotate.cpp: New test exercising lib.alg.rotate.

2006-01-12  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	* 25.generate.cpp (test_generate, test_generate_n): call to
	delete was updated.

2006-01-11  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 25.reverse.cpp: New test exercising lib.alg.reverse.

2006-01-11  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 21.string.append.cpp: New test exercising lib.string.append.
	* 21.string.plus.equal.cpp: New test exercising lib.string.op+=.

2006-01-10  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp (test_array): New function exercising the formatting
	of variable-width character arrays.

2006-01-10  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (libstd_vasnprintf): Handled precision in the formatting
	of variable-width character arrays and treated it as the number of
	characters to format, including any NULs.

2006-01-07  Martin Sebor  <sebor@roguewave.com>

	* valcmp.cpp (rw_dblcm): Silenced a SunPro 5.7 Warning: Conversion
	of 64 bit type value to "int" causes truncation.

2006-01-07  Martin Sebor  <sebor@roguewave.com>

	* localedef.cpp (rw_set_locale_root): Removed a gratuitous std::
	qualification from strcat.
	* Avoided accidentally including /usr/include/localedef.h on HP-UX.

2006-01-07  Martin Sebor  <sebor@roguewave.com>

	STDCXX-72
	* 25.adjacent.find.cpp (EqualityPredicate): New class template.
	(do_test): Used it instead of std::equal_to.

2006-01-07  Martin Sebor  <sebor@roguewave.com>

	* 18.limits.traps.cpp (<rw_any.h>): #included for rw_any_t.
	(test_traps): Used rw_any_t in informational output and used
	the "%b" specifier to format Boolean values.

2006-01-07  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp (test_bool): New function to exercise the 'b' format
	specifier.
	(test_integer): Called test_bool.

2006-01-07  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (_rw_vasnprintf_c99): Added a case for the 'b' format
	specifier as an extension for the formatting of Boolean values.
	(_rw_fmtinteger): Added handling of the 'b' format specifier.

2006-01-05  Martin Sebor  <sebor@roguewave.com>

	* 21.string.push_back.mt.cpp: Removed an unnecessary #include directive.
	(to_append): Removed the size of the array and relied on its initializer
	instead.
	(ehread_func): Asserted that array index is in bounds and replaced uses
	of the assert() macro with RW_ASSERT().
	(thread_func): Parenthesized a call to putc in order to thwart macro
	expansion and qualified size_t with the name of the declaring namespace.

2006-01-05  Martin Sebor  <sebor@roguewave.com>

	* atomic_add.cpp [!_RWSTD_REENTRANT] (run_test): Eliminated gcc errors
	and -Wunused warnings in conditionally compiled code.
	* atomic_xchg.cpp: Same.

2006-01-02  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 22.time.put.cpp: New test exercising lib.locale.time.put.

2006-01-02  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp (make_tm): New helper function.
	(test_tm): Called it and exercised the "%{t}" format
	string for the formatting of struct tm values.

2006-01-02  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (_rw_fmtbadaddr): New function.
	(rw_quotestr): Called _rw_fmtbadaddr.
	(_rw_fmtstr): Same.
	(_rw_fmttm): New function for the formatting of tm values.
	(_rw_fmtspec): Avoided misinterpreting a formatting specifier
	as a modifier when there would otherwise be no specifier and
	when extensions are enabled.
	Replaced the assert() macro with RW_ASSERT().

2006-01-01  Martin Sebor  <sebor@roguewave.com>

	* 25.lower.bound.cpp (conv_to_bool): Used instead of ConvertibleToBool.
	(test_lower_bound): Silenced bogus EDG eccp 3.6 remark #550-D: variable
	was set but never used.

2006-01-01  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 25.upper.bound.cpp: New test exercising lib.upper.bound.

2006-01-01  Martin Sebor  <sebor@roguewave.com>

	* alg_test.h (conv_to_bool): Enhanced to prevent default construction
	and assignment and replaced conversion to bool with one to a unique
	pointer type testable in the controlling expression of the if statement
	as required in 25, p7.

2005-12-30  Martin Sebor  <sebor@roguewave.com>

	* 25.lower.bound.cpp (Y): Replaced derivation by containment to really
	exercise STDCXX-89.

2005-12-30  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 25.lower.bound.cpp: New test exercising lib.lower.bound, including
	STDCXX-89.

2005-12-23  Martin Sebor  <sebor@roguewave.com>

	* 25.remove.cpp (ToString): Simplified the invocation of rw_asnprintf().

2005-12-23  Anton Pevtsov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 25.replace.cpp: New test exercising lib.alg.replace.

2005-12-21  Martin Sebor  <sebor@roguewave.com>

	* atomic_add.cpp: Passed the upper bound of the restricted numeric
	option specification as an argument instead of hardcoding it in the
	string.
	* atomic_xchg.cpp: Same.

i2005-12-21  Martin Sebor  <sebor@roguewave.com>

	* 19.exceptions.mt.cpp: Passed the upper bound of the restricted numeric
	option specification as an argument instead of hardcoding it in the
	string.
	* 21.string.push_back.mt.cpp: Same.

2005-12-21  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 20.temp.buffer.mt.cpp: New test exercising the thread safety
	of lib.temporary.buffer.

2005-12-21  Martin Sebor  <sebor@roguewave.com>

	* 0.cmdopts.cpp: Exercised restricted numeric options implemented
	in rev 358445.

2005-12-21  Martin Sebor  <sebor@roguewave.com>

	* cmdopt.cpp (rw_vsetopts): Factored out the processing of the numeric
	argument(s) of restricted command line arguments from here...
	(_rw_getbounds): ...to here. Added the ability to specify arguments
	in the option specification (denoted by a '*') instead of hardcoding
	their numeric value in the option string.
	(_rw_getarg): New function to parse and validate the argument of
	a restricted numeric command line option.
	(rw_runopts): Factored out single command line option processing code
	from here...
	(_rw_runopt): ...to this function. Implemented restricted numeric
	arguments for all types of options (i.e., with or without callbacks
	and optional or required).
	(_rw_set_ignenv): Renamed to follow the naming convention for symbols
	with internal linkage.
	(_rw_print_help): Same. Added informational output for restricted
	numeric arguments to command line options.
	(_RWSTD_NO_VA_LIST_ARRAY): Used the new config macro.

2005-12-20  Anton Pevtsov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 25.remove.cpp: New test exercising lib.alg.remove.

2005-12-19  Martin Sebor  <sebor@roguewave.com>

	* 25.adjacent.find.cpp (<cstring>): Replaced the #inclusion
	of <cstddef> to bring the declaration of std::strlen() into scope.
	* find.cpp: Same.
	* find_end.cpp: Same.

2005-12-18  Martin Sebor  <sebor@roguewave.com>

	* 19.exceptions.mt.cpp (--nloops=N, --nthreads=N): Restricted the set of
	valid values of N accepted by the test driver and eliminated validation
	done by the test (obviated by rev 357416).
	* 21.string.push_back.mt.cpp: Same.
	* 25.for.each.cpp (--nloops=N): Same.
	* atomic_add.cpp (--nloops=N, --nthreads=N): Same.
	* atomic_xchg.cpp: Same.

2005-12-17  Martin Sebor  <sebor@roguewave.com>

	* 25.generate.cpp: Eliminated the checking of the value of the numeric
        argument, N, passed to the --nloops=N command line option, obviated by
	the implementation of restricted numeric arguments in the test driver
	in rev 357416.

2005-12-17  Martin Sebor  <sebor@roguewave.com>

	* cmdopt.cpp (cmdopts_t): Added minval_ and maxval_ for the lower
	and upper bound, respectively, of restricted numeric arguments.
	(rw_vsetopts): Enhanced to allow restricted numeric arguments
	to be specified.
	(rw_runopts): Handled restricted numeric argumments.

2005-12-17  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 0.cmdopts.cpp: New test exercising the rw_runopts() and rw_setopts()
	utility functions.

2005-12-17  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 0.inputiter.cpp: New test exercising the class template InputIter.

2005-12-17  Martin Sebor  <sebor@roguewave.com>

	* alg_test.h (RW_ASSERT): Used instead of the assert macro and removed
        the dependency on the <cassert> header.

2005-12-17  Martin Sebor  <sebor@roguewave.com>

	* testdefs.h (RW_ASSERT): New macro. Same as assert() but active
        regardless of NDEBUG.

2005-12-16  Martin Sebor  <sebor@roguewave.com>

	* 25.generate.cpp (rw_opt_no_generate, rw_opt_no_generate_n): Added new
	command line options to disable tests exercising the corresponding
	algorithms.

2005-12-16  Martin Sebor  <sebor@roguewave.com>

	* 25.generate.cpp (Size): Removed the definition of the class
	and replaced it with the template defined in alg_test.h (see
	rev 357263).

2005-12-16  Martin Sebor  <sebor@roguewave.com>

	* 25.fill.cpp: Simplified and exercised the fill_n() template
	specialized on user-defined Size argument. Re-introduced explicit
	instantiation directives to better exercise both templates.

2005-12-16  Martin Sebor  <sebor@roguewave.com>

	* alg_test.h (rw/_iterbase.h>: Included implementation header instead
	of the bloated <iterator> to reduce namespace pollution.
	(Size<T>): New class template used to exercise the fill_n, generate_n,
	and search_n algorithms.
	(RW_ALG_TEST_H_INCLUDED): Renamed include guard	to conform to the naming
	convention used in the test suite.
	(<rw/defs.h>): Removed an unnecessary/inappropriate include directive
	subsumed by <testdefs.h>.

2005-12-16  Martin Sebor  <sebor@roguewave.com>

	STDCXX-70
	* 21.string.push_back.mt.cpp: New test exercising the thread safety
	of the push_back() member function of basic_string (and indirectly,
	the thread safety of the member operator+=(value_type)).

2005-12-16  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 19.exceptions.mt.cpp: New test exercising the thread safety
	of the C++ Standard Library exception classes.

2005-12-16  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* atomic_add.cpp: New test exercising the __rw_atomic_preincrement
	and __rw_atomic_predecrement overloaded functions.
	* atomic_xchg.cpp: New test exercising the __rw_atomic_exchange
	overloaded functions.

i2005-12-16  Martin Sebor  <sebor@roguewave.com>

	STDCXX-3
	* rwthread.h: New header containing declarations of the test suite
	thread helpers.
	* rwthread.cpp: New source with definitions of the thread helpers.

2005-12-14  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 0.strncmp.cpp: New test exercising the rw_strncmp() overloads.
	* 0.valcmp.cpp: New test exercising the rw_valcmp() family of utility
	overloads.

2005-12-14  Martin Sebor  <sebor@roguewave.com>

	* valcmp.cpp (_RWSTD_SIZE_T): Replaced with size_t.
	(_rw_cmp1): Changed the type of the local index from int to size_t
	to avoid casts and corrected the handling of the CMP_RETOFF bit.
	(_rw_cmp2): Same.
	(_rw_cmp4): Same.
	(_rw_cmp8): Same.

2005-12-07  Anton Pevtsov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 25.generate.cpp: New test exercising lib.alg.generate. Also
	exercises STDCXX-83.

2005-12-06  Anton Pevtsov  <antonp@moscow.vdiweb.com>
            Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 25.find.first.cpp: New test exercising lib.alg.find.first.of.

2005-12-05  Martin Sebor  <sebor@roguewave.com>

	* 2.smartptr.shared.cpp: New test exercising tr.util.smartptr.shared.
	* 2.smartptr.weak.cpp: New test exercising tr.util.smartptr.weak.

2005-12-05  Anton Pevtsov <antonp@moscow.vdiweb.com>

	* 25.find.end.cpp (do_test): Eliminated memory leaks.

2005-12-05  Martin Sebor  <sebor@roguewave.com>

	* 25.find.end.cpp (run_tests): Corrected a typo introduced in r352022.

2005-12-05  Martin Sebor  <sebor@roguewave.com>

	* 25.find.cpp: Exercised the algorithm's ability to return an iterator
	pointing to the first (rather than the second or any other) in a series
	of duplicate elements in the subject sequence.

2005-12-03  Martin Sebor  <sebor@roguewave.com>

	* 25.find.end.cpp: Changed copyright notice over to Apache.

2005-12-03  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-4
	* 25.find.end.cpp: New test exercising lib.alg.fin.end.

2005-12-02  Anton Pevtsov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 25.find.cpp: New test exercising lib.alg.find.

2005-12-02  Anton Pevtsov  <antonp@moscow.vdiweb.com>

	STDCXX-72
	* 25.adjacent.find.cpp: Enhanced to exercise the predicate form
	of the algorithm.

2005-12-02  Anton Pevtsov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	* 25.copy.cpp: New test exercising lib.alg.copy.

2005-12-01  Martin Sebor  <sebor@roguewave.com>

	* valcmp.h: Added comments for rw_strncmp() overloads.

2005-12-01  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (_rw_bufcat): Increased the size of the buffer and added
	a trailing guard to detect writes past the end (and other types of
	memory corruption).
	(_rw_vfprintf): Avoided using a statically allocated buffer (might
	be freed by _rw_bufcat).

2005-11-29  Anton Pevtsov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 25.fill.cpp: New test exercising lib.alg.fill.

2005-11-25  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp: (test_signal): Exercised width and justification.

2005-11-25  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp: (_rw_vfprintf): Flushed out stream in case it isn't
	line-buffered (e.g., when stderr is determined not to refer to a
	terminal device, for example after it has been redirected to a file).
	(_rw_fmtsignal): Used _rw_fmtstr() to format the signal name to take
	advantage of the string justification capabilities of the function.

2005-11-25  Martin Sebor  <sebor@roguewave.com>

	STDCXX-3
	* alg_test.cpp: New file containing the definitions of class X members.

2005-11-25  Martin Sebor  <sebor@roguewave.com>

	* adjacent_find.cpp: Improved names and added comments for clarity.
	Added a warning pointing out that the predicate overload is not being
	exercised by the test (see stdcxx-72).
	Removed explicit instantiation obviated by implicitly instantiating
	the algorithm on iterator types of all supported categories.

2005-11-25  Martin Sebor  <sebor@roguewave.com>

	* alg_test.h (ConstRandomAccessIter): Added the correct operator[],
	replacing the one inherited from the base class (which returns
	a non-const reference).

2005-11-25  Anton Pevtsov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	STDCXX_4
	* 25.mismatch.cpp: New test exercising lib.mismatch.

2005-11-23  Martin Sebor  <sebor@roguewave.com>

	* 19.cerrno.cpp: New test exercising lib.errno, the contents
	of the header <cerrno>.

2005-11-22  Martin Sebor  <sebor@roguewave.com>

	* cmdopt.cpp (rw_runopts): Enhanced options specified using the "#"
	character (such as "|-foo#") and allowed them to be followed by the
	quals sign and a numeric argument, such as --foo=123.

2005-11-22  Martin Sebor  <sebor@roguewave.com>

	* 25.for.each.cpp: Corrected the name of the file in a comment.

2005-11-22  Martin Sebor  <sebor@roguewave.com>

	* alg_test.h (ConstFwdIter): Passed the expected number of arguments
	to the base class ctor.
	* for_each.cpp: Enhanced to exercise InputIterators and other
	non-mutable iterators.

2005-11-18  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp: (do_test): Tightened up and detected error cases.
        (test_paramno): Added a couple of test cases.

2005-11-18  Anton Pevtsov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	* 25.equal.cpp: New test exercising lib.alg.equal.

2005-11-18  Martin Sebor  <sebor@roguewave.com>

	* any.cpp (rw_any_t): Used memset instead of default-initialization
	in the ctor initializer list in all ctors to work around a SunPro
	5.{3,4} bug.
	(type_name): Removed the redundant "signed" from type names.
	Added a missing _RWSTD_NO_LONG_DOUBLE guard.
	(tostr): Handled all enumerators in the switch to silence
	the gcc warning: enumeration value not handled in switch.

2005-11-17  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp (test_signal): New function exercising
	the "%{K}" format specifier for the formatting of signal names.

2005-11-17  Anton Pevtsov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 25.for.each.cpp: New test exercising lib.alg.foreach.

2005-11-17  Martin Sebor  <sebor@roguewave.com>

	STDCXX-3
	* alg_test.h: New header with definitions of helpers used
	by algorithm tests.

2005-11-17  Anton Pevtsov  <antonp@moscow.vdiweb.com>
	    Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 25.adjacent.find.cpp: New test exercising lib.alg.adjacent.find.

2005-11-14  Martin Sebor  <sebor@roguewave.com>

	* 0.printf.cpp (do_test): Removed the formatting of arguments from
	diagnostic messages to avoid having to deal with ill-formed conversions
	such as from member pointers to integers.
	(test_memptr): Exercised the formatting of pointers to members.
	(test_width_specific_int): Conditionalized for the absence of long long
	support.
	(test_errno): Exercised the "%{#*m}" format specification.
	Changed the text of warning messages.

2005-11-14  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp: (_rw_fmtpointer): Implemented the formatting of all
	pointer types (ordinary, function, and member) in a consistent way
	and without relying on _rw_fmtllong.
	(_rw_fmtptr): Called _rw_fmtpointer.
	(_rw_fmtfunptr): Same.
	(_rw_fmtmemptr): Same.
	(_rw_vfprintf): New implementation function for rw_fprintf and
	rw_printf. Called OutputDebugString() on Windows to write the string
	to the debugger window.
	(rw_fprintf): Called _rw_vfprintf.
	(rw_printf): Same.
	(rw_vasnprintf): Used __builtin_va_copy only with gcc 3.x and better
	(prior versions	do not implement the built-in).
	Renamed all static functions according to the naming convention,
	i.e., so that each name starts with an underscore.

2005-11-11  Martin Sebor  <sebor@roguewave.com>

	* valcmp.cpp (rw_dblcmp): Hacked around a missing 64-bit integer
	type (e.g., when long long support has been disabled).

2005-11-11  Martin Sebor  <sebor@roguewave.com>

	* 18.limits.traps.cpp: Set the svn:keywords property to Id.

2005-11-11  Martin Sebor  <sebor@roguewave.com>

	* 18.limits.traps.cpp: Used Structured Exception Handling on Windows.
	Removed the unnecessary SIGTRAP handler (integer division by zero
	typically causes SIGFPE).

2005-11-09  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 18.limits.traps.cpp: New test exercising numeric_limits::traps.

2005-10-13  Martin Sebor  <sebor@roguewave.com>

	STDCXX-46
	* 26.c.math.cpp: New test exercising lib.c.math.

2005-09-21  Martin Sebor  <sebor@roguewave.com>

	STDCXX-4
	* 22.locale.num.get.cpp: New test exercising the num_get facet.

2005-09-21  Martin Sebor  <sebor@roguewave.com>

	* valcmp.cpp (rw_ldblcmp): Implemented in terms of absolute
	and relative errors instead of naively using memcmp().

2005-09-20  Martin Sebor  <sebor@roguewave.com>

	* testdefs.h: Added #definitions of _RWSTD_PRI* macros (mirroring
	a subset of the C99 PRI* macros).

2005-09-20  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (libstd_vasnprintf): Extended the %{m} specifier to handle
	width as the errno value (instead of using the errno variable value).

2005-09-18  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.num.put.cpp: New test exercising the num_put facet.

2005-09-18  Martin Sebor  <sebor@roguewave.com>

        * snprintfa.cpp (rw_vasnprintf): Unconditionally cleared the supplied
        character buffer by inserting '\0' into the first position to make
        sure the output is always NUL-terminated.
        (rw_ansprintf): Renamed to rw_asnprintf (typo).
        (rw_fmtsignal): New function to format a signal name.
        (libstd_vasnprintf): Called rw_fmtsignal in response to the %{K}
        format specifier.

2005-09-18  Martin Sebor  <sebor@roguewave.com>

	* valcmp.h (rw_equal): New function template and overloads thereof
	for the three floating point types.
	* valcmp.cpp: Renamed file scope statics according to the naming
        convention for such things (i.e., _rw_xxx).

2005-09-18  Martin Sebor  <sebor@roguewave.com>

	STDCXX-3
	* any.h: New. Definition of the rw_any_t helper class.
	* any.cpp: New. Definitions of the rw_any_t class member functions.

2005-09-18  Martin Sebor  <sebor@roguewave.com>

	* opt_lines.h: Set the svn:keywords Id property and changed
	the copyright notice.
	* opt_lines.cpp: Same.
	* opt_trace.h: Same.
	* opt_trace.cpp: Same.
	* opt_types.h: Same.
	* opt_types.cpp: Same.

2005-09-18  Martin Sebor  <sebor@roguewave.com>

        STDCXX-3
        * localedef.h: New. Declarations of helper functions to invoke
        the stdcxx localedef and locale utilities.
        * localedef.cpp: New. Implementation of the above.

2005-09-18  Martin Sebor  <sebor@roguewave.com>

	* file.h: New. Declarations of testsuite file I/O helper functions.
	* file.cpp: New. Implementation of the same.

2005-09-18  Martin Sebor  <sebor@roguewave.com>

	STDCXX-3
	* environ.h: New. Declaration of the rw_putenv() helper function
	for seeting one or more environment variables in a portable way.
	* environ.cpp: New. Implementation of the same.

2005-09-18  Martin Sebor  <sebor@roguewave.com>

	STDCXX-3
	* system.h: New. Declaration of the rw_system() convenience function
	taking a variable number of arguments and invoking system().
	* system.cpp. New. Implementation of the above.

2005-09-18  Martin Sebor  <sebor@roguewave.com>

	* driver.cpp: Removed _rw_opt_no_stdout, _rw_opt_verbose, and
	_rw_opt_compat and replaced each with calls to the respective command
	line option handler with the special arguments 1, and 0.
	(_rw_setopt_verbose): Renamed to _rw_opt_verbose and allowed the handler
	to be called in "query mode" to retrieve the state of the option.
	(_rw_setopt_compat): Renamed to _rw_opt_compat and implemented query
	mode.
	(_rw_setopt_stdout): Renamed to _rw_opt_no_stdout and implemented
	query mode.
	(_rw_use_color): New function. Returns 1 when colorized output can
	and should be used.
	(_rw_opt_quiet): New handler for the -q|--quiet command line options.
	(_rw_vissue_diag): New function called to unconditionally issue
	a diagnostic.
	(_rw_vdiag): Factored out code into _rw_vissue_diag for readability
	and called the function to issue a diagnostic.
	(rw_vtest): Used color in the summary table.

2005-09-18  Martin Sebor  <sebor@roguewave.com>

	* opt_diags.h: Set the svn keywords Id property.
	Increased the size of the buffer for escape sequences.
	* opt_diags.cpp: Set the svn keywords Id property.
	Initialized previously uninitialized data members.
	(_rw_setopt_diags): Checked for negative (unused) indices and avoided
	using them to dereference array elements.

2005-09-15  Martin Sebor  <sebor@roguewave.com>
	STDCXX-4
	* 0.printf.cpp: New test exercising the rw_printf family of functions.

2005-09-15  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (rw_vasnprintf_c99): Corrected a typo in conditionally
	compiled code.
	(rw_quotechar): Silenced gcc warnings: comparison is always false
	due to limited range of data type.

2005-09-14  Martin Sebor  <sebor@roguewave.com>

	STDCXX-3
	* opt_diags.h: New.
	* opt_diags.cpp: New. Definitions of functions for the processing
	of the --diags command line option.
	* opt_lines.h: New.
	* opt_lines.cpp: New. Definitions of functions for the processing
	of the --enable-line and --no-line command line options.
	* opt_trace.h: New.
	* opt_trace.cpp: New. Definitions of functions for the processing
	of the --trace and --severity command line options.
	* opt_types.h: New.
	* opt_types.cpp: New. Definitions of functions for the processing
	of the --enable-type and --no-type command line options.
	* cmdopt.cpp: Refactored. Moved the processing of specific command
	line options to separate files for better encapsulation.
	Eliminated memory corruption when the cmdopts array is reallocated.
	Replaced bool with int for better portability.
	* driver.h: Removed declarations and adjusted severities (see below).
	* driver.cpp: Refactored (see above).
	Introduced the concept of expected diagnostics (i.e., those expected
	to be active, such as expected assertion failures) and added a command
	line option (--expect=, see opt_lines.cpp) to make it possible to
	easily mark them as such. Reassigned severities to diagnostics.
	Introduced a new naming convention for symbols internal to the driver
	(regardless of linkage) to more easily distinguish them from public
	names with external linkage: _rw_xxx.
	(rw_trace): Removed.
	(rw_debug): Removed.
	(_rw_vdiag): Enabled verbose mode as the default formatting mode.

2005-09-14  Martin Sebor  <sebor@roguewave.com>

	* 21.string.assign.cpp: Set svn:keywords Id.
	* 21.string.insert.cpp: Same.

2005-09-14  Martin Sebor  <sebor@roguewave.com>
	STDCXX-4
	* 21.string.assign.cpp: New test exercising lib.string.assign.
	* 21.string.insert.cpp: New test exercising lib.string.insert.

2005-09-14  Martin Sebor  <sebor@roguewave.com>

	* printf.cpp (rw_fmtspec): Added the handling of Fmtspec::mod_A.
	(rw_fmtfloating): Handled Fmtspec::mod_A and hijacked the width	field
	as the size of the floating point value in bytes when set.
	(rw_quotechar): Returned the number of characters appended to the
	buffer by the fuction instead of the entire length.
	(rw_quotestr): Computed array length the "hard way" instead of relying
	on char_traits since the template is instantiated on types other than
	char and wchar_t.
	(rw_quotestr): Disabled width handling and hijacked width for array
	size when Fmtspec::mod_A is set.
	(libstd_vasnprintf): Handled %{Ac} and %{Ae}, %{Af}, and %{Ag}, and
	used width to determine array element size in bytes.

2005-09-06  Martin Sebor  <sebor@roguewave.com>

	* driver.h: Added Doxygen-style documentation.

2005-09-06  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.money.put.cpp: New (initially committed in r278837
	by accident.) Test exercising the money_put facet.

2005-09-06  Martin Sebor  <sebor@roguewave.com>

	* 22.locale.money.get.cpp: New (initially committed in r279127
	by accident.) Test exercising the money_get facet.

2005-09-06  Martin Sebor  <sebor@roguewave.com>

	* valcmp.h (rw_fltcmp, rw_dblcmp, rw_ldblcmp): New. Declarations of
	utility functions for reliable comparison of floating point values.
	* valcmp.cpp (rw_fltcmp, rw_dblcmp, rw_ldblcmp): New. Definitions
	of the above based on
	http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm.

2005-09-05  Martin Sebor  <sebor@roguewave.com>

	* cmdopt.h: Added documentation.

2005-09-05  Martin Sebor  <sebor@roguewave.com>
	
        STDCXX-3
	* tests/include/driver.h: New. Declarations of test suite driver
	functions.
	* tests/include/testdefs.h: New. Definitions of test suite macros.
	* tests/include/printf.h: New. Declarations of the rw_sprintf()
	family of testsuite helper functions for formatted output.
	* tests/include/valcmp.h: New. Declarations of the rw_valcmp()
	family of testsuite helper functions for comparing arrays of
	heterogeneous integral objects.
	* tests/include/cmdopt.h: New. Declarations of the rw_runopts()
	and rw_setopts() helper functions for the processing of command
	line options.
	* tests/src/valcmp.cpp: New. Implementation of the above.
	* tests/src/printf.cpp: Ditto.
	* tests/src/cmdopt.cpp: Ditto.
	* tests/src/driver.cpp: Ditto.
	* etc/config/GNUmakefile.tst: Partially reverted r225375
	and renamed the test/ subdirectory back to tests/.
	* etc/config/GNUmakefile.rwt: Ditto.
